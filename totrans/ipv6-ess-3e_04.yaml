- en: Chapter 3. The Structure of the IPv6 Protocol
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3章：IPv6协议的结构
- en: This chapter explains the structure of the IPv6 header and compares it to the
    IPv4 header. It also discusses Extension headers, which are new in IPv6.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了IPv6头部的结构，并将其与IPv4头部进行了比较。还讨论了IPv6中新引入的扩展头部。
- en: Understanding the structure of a protocol header and the type of information
    that comes with it is the best foundation for working with a protocol. This understanding
    helps you to identify how the protocol can best be configured and what the options
    are. It also helps you to identify possible sources of problems and issues when
    troubleshooting.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 理解协议头部的结构以及其中包含的信息类型，是理解协议工作原理的最佳基础。这种理解有助于你识别如何最优配置协议以及有哪些选项。同时，它也帮助你在故障排除时识别潜在的问题和问题源。
- en: The header structure of an IPv6 packet is specified in RFC 2460\. The header
    has a fixed length of 40 bytes. The two fields for Source and Destination addresses
    each use 16 bytes (128 bits), so there are only 8 bytes for general header information.
    The base IPv6 header is therefore much simpler and leaner than the IPv4 header,
    allowing for more efficient processing and, as we will see, more flexibility in
    extending the protocol to meet future needs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6数据包的头部结构在RFC 2460中有详细说明。头部的长度是固定的，为40字节。源地址和目的地址各占16字节（128位），因此一般头部信息只剩下8字节。因此，基础的IPv6头部比IPv4头部要简单得多，处理起来也更高效，正如我们稍后所看到的，它在扩展协议以满足未来需求时也更加灵活。
- en: General Header Structure
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般头部结构
- en: 'In IPv6, five fields from the IPv4 header have been removed:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPv6中，IPv4头部的五个字段被移除了：
- en: Header Length
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部长度
- en: Identification
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符
- en: Flags
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志
- en: Fragment Offset
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分段偏移
- en: Header Checksum
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部校验和
- en: The Header Length field was removed because it is not needed in a header with
    a fixed length. In IPv4, the minimum header length is 20 bytes, but if options
    are added, it can be extended in 4-byte increments up to 60 bytes. Therefore,
    with IPv4, the information about the total length of the header is important.
    In IPv6, options are defined in Extension headers (covered later in this chapter).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 头部长度字段被移除，因为在一个固定长度的头部中不需要它。在IPv4中，最小的头部长度是20字节，但如果添加选项，它可以每次增加4字节，最多扩展到60字节。因此，在IPv4中，关于头部总长度的信息是很重要的。在IPv6中，选项定义在扩展头部中（在本章后面会讲到）。
- en: The Identification, Flags, and Fragment Offset fields are the fields that are
    used for the fragmentation of a packet in the IPv4 header. *Fragmentation* happens
    if a large packet has to be sent over a network that supports only smaller packet
    sizes. In that case, the IPv4 router splits the packet into smaller slices and
    forwards multiple packets. The destination host collects the packets and reassembles
    them. If only one packet is missing or has an error, the whole transmission has
    to be redone; this is very inefficient. In IPv6, a host learns the Path Maximum
    Transmission Unit (MTU) size through a procedure called *Path MTU Discovery*,
    which has been defined in RFC 1981\. In IPv4 the *Don’t Fragment Bit* (DF Bit)
    was used for Path MTU Discovery. If a router could not forward a packet due to
    its size and could not fragment it because the DF Bit was set, it sent back an
    ICMP “Packet Too Big” message to the source node. If a sending IPv6 host wants
    to fragment a packet, it will use an Extension header to do so. IPv6 routers along
    the path of a packet do not provide fragmentation as they did with IPv4\. So the
    router always sends back a “Packet Too Big” message to the source node. This is
    the reason that the Identification, Flags, and Fragment Offset fields were removed
    from the IPv6 header and will be inserted in an Extension header by the source
    host if needed. I explain Extension headers later in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符、标志和分段偏移字段是IPv4头部中用于数据包分段的字段。*分段*发生在当一个大的数据包必须通过只支持较小数据包大小的网络发送时。在这种情况下，IPv4路由器会将数据包分割成更小的部分并转发多个数据包。目标主机会收集这些数据包并将它们重新组装。如果只有一个数据包丢失或出现错误，则整个传输必须重新进行；这非常低效。在IPv6中，主机通过一种叫做*路径MTU发现*的程序来学习路径最大传输单元（MTU）大小，该程序在RFC
    1981中定义。在IPv4中，*不分段位*（DF位）用于路径MTU发现。如果路由器由于数据包大小无法转发，并且由于DF位被设置而无法进行分段，它会向源节点发送ICMP“数据包过大”消息。如果发送方的IPv6主机希望对数据包进行分段，它将使用扩展头部来实现。IPv6路由器在数据包的路径上不会像IPv4那样提供分段服务。因此，路由器总是向源节点发送“数据包过大”消息。这就是为什么标识符、标志和分段偏移字段被从IPv6头部中移除的原因，如果需要，它们将由源主机插入到扩展头部中。我将在本章后面解释扩展头部。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Path MTU Discovery is explained in [Chapter 4](ch04.html "Chapter 4. ICMPv6").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 路径MTU发现过程将在[第4章](ch04.html "第4章. ICMPv6")中进行解释。
- en: The Header Checksum field was removed to improve processing speed. If routers
    do not have to check and update checksums, processing becomes much faster. At
    the time when IPv4 was developed, checksumming at the media access level wasn’t
    common, so the checksum field in the IPv4 header made sense. Today, the risk for
    undetected errors and misrouted packets is minimal. There is also a checksum field
    at the transport layer (UDP and TCP). With IPv4, a UDP checksum is optional; with
    IPv6, a UDP checksum is mandatory. Since IP is a *best-effort delivery protocol*,
    it is the responsibility of upper layer protocols to ensure integrity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 头部校验和字段被移除以提高处理速度。如果路由器不需要检查和更新校验和，处理速度将大大提高。在IPv4开发时期，媒体接入层的校验和检查并不常见，因此IPv4头部中的校验和字段是合理的。今天，未被检测到的错误和错误路由的数据包的风险已经非常低。传输层（UDP和TCP）中也有校验和字段。对于IPv4，UDP校验和是可选的；而在IPv6中，UDP校验和是必须的。由于IP是一个*尽力而为的传输协议*，因此确保数据完整性的责任属于上层协议。
- en: The Traffic Class field replaces the “Type of Service” field in IPv4\. IPv6
    has a different mechanism to handle preferences. The Protocol Type field in IPv4
    has been renamed to Next Header field and the Time-to-Live (TTL) field has been
    renamed to Hop Limit. A Flow Label field was added.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 流量类字段取代了IPv4中的“服务类型”字段。IPv6有不同的机制来处理优先级。IPv4中的协议类型字段已更名为下一个头部字段，生存时间（TTL）字段已更名为跳数限制字段。还新增了流标签字段。
- en: The Fields in the IPv6 Header
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6头部字段
- en: By becoming familiar with the fields of the IPv6 header, you will better understand
    how IPv6 works.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过熟悉IPv6头部字段，你将更好地理解IPv6的工作原理。
- en: '[Figure 3-1](ch03.html#fields_in_the_ipv6_header "Figure 3-1. Fields in the
    IPv6 header") provides an overview of the IPv6 header. The fields are discussed
    in detail in the following list.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-1](ch03.html#fields_in_the_ipv6_header "图3-1. IPv6头部字段")概述了IPv6头部。接下来的列表中将详细讨论各个字段。'
- en: '![Fields in the IPv6 header](images/ipv6_0301.png)Figure 3-1. Fields in the
    IPv6 header'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![IPv6头部字段](images/ipv6_0301.png)图3-1. IPv6头部字段'
- en: '[Figure 3-1](ch03.html#fields_in_the_ipv6_header "Figure 3-1. Fields in the
    IPv6 header") shows that even though the header has a total size of 40 bytes,
    which is twice as long as a default IPv4 header, it has actually been streamlined
    because most of the header is taken up by the two 16-byte IPv6 addresses. That
    leaves only 8 bytes for other header information.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-1](ch03.html#fields_in_the_ipv6_header "图3-1. IPv6头部字段")显示，即使头部的总大小为40字节，是默认IPv4头部的两倍长，但实际上它已经进行了精简，因为大部分头部空间被两个16字节的IPv6地址占据。这样，只有8字节的空间用于其他头部信息。'
- en: Version (4 bits)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 版本（4位）
- en: This 4-bit field contains the version of the protocol. In the case of IPv6,
    the number is 6\. Version number 5 could not be used because it was already assigned
    to the experimental stream protocol (RFC 1819).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个4位字段包含了协议的版本号。在IPv6中，该数字为6。版本号5不能使用，因为它已经被分配给了实验性流协议（RFC 1819）。
- en: Traffic class (1 byte)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 流量类（1字节）
- en: This field replaces the Type of Service field in IPv4\. It facilitates the handling
    of real-time data and any other data that requires special handling, and sending
    nodes and forwarding routers can use it to identify and distinguish between different
    classes or priorities of IPv6 packets.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段取代了IPv4中的服务类型字段。它有助于处理实时数据以及任何其他需要特殊处理的数据，发送节点和转发路由器可以利用该字段识别并区分不同类别或优先级的IPv6数据包。
- en: RFC 2474, “Definition of the Differentiated Services Field (DS Field) in the
    IPv4 and IPv6 Headers,” explains how the Traffic Class field in IPv6 can be used.
    RFC 2474 uses the term *DS Field* to refer to the Type of Service field in the
    IPv4 header, as well as to the Traffic Class field in the IPv6 header.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 2474《IPv4和IPv6头部中的区分服务字段（DS字段）定义》解释了如何使用IPv6中的流量类字段。RFC 2474使用*DS字段*一词来指代IPv4头部中的服务类型字段以及IPv6头部中的流量类字段。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [Chapter 5](ch05.html "Chapter 5. Networking") for more information
    on the use of the Traffic Class field.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关流量类字段使用的更多信息，请参见[第5章](ch05.html "第5章. 网络").
- en: Flow label (20 bits)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 流标签（20位）
- en: This field distinguishes packets that require the same treatment in order to
    facilitate the handling of real-time traffic. A sending host can label sequences
    of packets with a set of options. Routers keep track of flows and can process
    packets belonging to the same flow more efficiently because they do not have to
    reprocess each packet’s header. The flow label and address of the source node
    uniquely identify the flow. Nodes that do not support the functions of the Flow
    Label field are required to pass the field unchanged when forwarding a packet
    and to ignore the field when receiving a packet. All packets belonging to the
    same flow must have the same Source and Destination IP address.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段区分了需要相同处理的数据包，以便促进实时流量的处理。发送主机可以为一系列数据包标记一组选项。路由器跟踪流，并可以更高效地处理属于同一流的数据包，因为它们不需要重新处理每个数据包的头部。流标签和源节点的地址唯一标识该流。不支持流标签字段功能的节点在转发数据包时必须保持该字段不变，在接收数据包时忽略该字段。所有属于同一流的数据包必须具有相同的源和目的
    IP 地址。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The use of the Flow Label field is experimental and is currently still under
    discussion at the IETF at the time of writing. Refer to [Chapter 5](ch05.html
    "Chapter 5. Networking") for more information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 流标签字段的使用是实验性的，且在写作时仍在 IETF 讨论中。有关更多信息，请参见 [第 5 章](ch05.html "第 5 章. 网络").
- en: Payload length (2 bytes)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Payload 长度（2 字节）
- en: This field specifies the *payload*—i.e., the length of data carried after the
    IP header. The calculation in IPv6 is different from the one in IPv4\. The Length
    field in IPv4 includes the length of the IPv4 header, whereas the Payload Length
    field in IPv6 contains only the data following the IPv6 header. Extension headers
    are considered part of the payload and are therefore included in the calculation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段指定 *负载*——即 IP 头部之后携带的数据长度。IPv6 中的计算与 IPv4 中的不同。IPv4 中的长度字段包含 IPv4 头部的长度，而
    IPv6 中的 Payload Length 字段仅包含 IPv6 头部之后的数据。扩展头被视为负载的一部分，因此也包含在计算中。
- en: The fact that the Payload Length field has 2 bytes limits the maximum packet
    payload size to 64 KB. IPv6 has a *Jumbogram Option*, which supports bigger packet
    sizes if needed. The Jumbogram Option is carried in a Hop-by-Hop Option header
    (discussed later in this chapter). Jumbograms are relevant only when IPv6 nodes
    are attached to links that have a link MTU greater than 64 KB; they are specified
    in RFC 2675.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Payload Length 字段有 2 字节，限制了最大数据包负载大小为 64 KB。IPv6 有一个 *Jumbogram 选项*，在需要时可以支持更大的数据包大小。Jumbogram
    选项携带在跳跃-跳跃选项头中（将在本章后面讨论）。只有当 IPv6 节点连接到具有大于 64 KB 的链路 MTU 的链路时，Jumbogram 才是相关的；它们在
    RFC 2675 中进行了规范。
- en: Next Header (1 byte)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下一头（1 字节）
- en: In IPv4, this field is called the Protocol Type field, but it was renamed in
    IPv6 to reflect the new organization of IP packets. If the next header is UDP
    or TCP, this field will contain the same protocol numbers as in IPv4—for example,
    protocol number 6 for TCP or 17 for UDP. But if Extension headers are used with
    IPv6, this field contains the type of the next Extension header. Extension headers
    are located between the IP header and the TCP or UDP header. [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field") lists possible values in the Next
    Header field. The new IPv6-related headers are bold.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPv4 中，该字段称为协议类型字段，但在 IPv6 中更名，以反映 IP 数据包的新组织结构。如果下一个头部是 UDP 或 TCP，则此字段将包含与
    IPv4 中相同的协议编号——例如，TCP 的协议编号是 6，UDP 的协议编号是 17。但如果在 IPv6 中使用了扩展头，则此字段包含下一个扩展头的类型。扩展头位于
    IP 头和 TCP 或 UDP 头之间。[表 3-1](ch03.html#values_in_the_next_header_field "表 3-1.
    下一头字段中的值") 列出了下一头字段中的可能值。新的 IPv6 相关头部为加粗显示。
- en: Table 3-1. Values in the Next Header field
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-1. 下一头字段中的值
- en: '| Value | Description |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0 | In an IPv4 header: reserved and not used**In an IPv6 header: Hop-by-Hop
    Option header following** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 在 IPv4 头部中：保留并未使用 **在 IPv6 头部中：跳跃-跳跃选项头跟随** |'
- en: '| 1 | Internet Control Message Protocol (ICMPv4)—IPv4 support |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 网络控制消息协议（ICMPv4）—IPv4 支持 |'
- en: '| 2 | Internet Group Management Protocol (IGMPv4)—IPv4 support |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 网络组管理协议（IGMPv4）—IPv4 支持 |'
- en: '| 4 | IPv4 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 4 | IPv4 |'
- en: '| 5 | Stream Protocol (RFC 1819) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 流协议（RFC 1819） |'
- en: '| 6 | TCP |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 6 | TCP |'
- en: '| 8 | Exterior Gateway Protocol (EGP) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 外部网关协议（EGP） |'
- en: '| 9 | IGP—any private interior gateway (used by Cisco for their IGRP) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 9 | IGP—任何私有内部网关（由 Cisco 用于其 IGRP） |'
- en: '| 17 | UDP |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 17 | UDP |'
- en: '| 41 | **IPv6** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 41 | **IPv6** |'
- en: '| 43 | **Routing header** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 43 | **路由头** |'
- en: '| 44 | **Fragmentation header** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 44 | **分片头** |'
- en: '| 45 | Interdomain Routing Protocol (IDRP) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 45 | 跨域路由协议（IDRP） |'
- en: '| 46 | Resource Reservation Protocol (RSVP) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 46 | 资源预留协议（RSVP） |'
- en: '| 47 | General Routing Encapsulation (GRE) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 47 | 通用路由封装（GRE） |'
- en: '| 50 | **Encapsulating Security Payload header** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 50 | **封装安全负载头** |'
- en: '| 51 | **Authentication header** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 51 | **身份验证头** |'
- en: '| 58 | **ICMPv6** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 58 | **ICMPv6** |'
- en: '| 59 | **No Next Header for IPv6** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 59 | **无下一个头部用于IPv6** |'
- en: '| 60 | **Destination Options header** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 60 | **目标选项头** |'
- en: '| 88 | EIGRP |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 88 | EIGRP |'
- en: '| 89103 | OSPFPIM |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 89103 | OSPFPIM |'
- en: '| 108 | IP Payload Compression Protocol |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 108 | IP Payload Compression Protocol |'
- en: '| 115 | Layer 2 Tunneling Protocol (L2TP) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 115 | 第2层隧道协议（L2TP） |'
- en: '| 132 | Stream Control Transmission Protocol (SCTP) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 132 | 流控制传输协议（SCTP） |'
- en: '| 135 | *Mobility Header (Mobile IPv6)* |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 135 | *移动头（移动IPv6）* |'
- en: '| 140 | Shim6 (RFC 5533) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 140 | Shim6（RFC 5533） |'
- en: '| 143–252 | Unassigned |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 143–252 | 未分配 |'
- en: '| 253, 254 | Used for experimentation and testing (RFC 3692) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 253, 254 | 用于实验和测试（RFC 3692） |'
- en: '| 255 | Reserved |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 255 | 保留 |'
- en: Header type numbers derive from the same range of numbers as protocol type numbers,
    and therefore should not conflict with them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 头部类型编号来源于与协议类型编号相同的编号范围，因此不应与其冲突。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Go to [http://www.iana.org/assignments/protocol-numbers](http://www.iana.org/assignments/protocol-numbers)
    for the current list.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问[http://www.iana.org/assignments/protocol-numbers](http://www.iana.org/assignments/protocol-numbers)查看当前列表。
- en: Hop limit (1 byte)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 跳数限制（1字节）
- en: This field is analogous to the TTL field in IPv4\. Originally, the IPv4 TTL
    field contained a number of seconds, indicating how long a packet can remain in
    the network before being destroyed. In fact, IPv4 routers simply decrement this
    value by one at each hop. This field has been renamed to Hop Limit in IPv6 to
    reflect the purpose. The value in this field expresses a number of hops. Every
    forwarding node decrements the number by one. If a router receives a packet with
    a Hop Limit of 1, it decrements it to 0, discards the packet, and sends the ICMPv6
    message “Hop Limit exceeded in transit” back to the sender.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段类似于IPv4中的TTL字段。最初，IPv4中的TTL字段包含一个秒数，表示数据包在被销毁之前可以在网络中停留的时间。实际上，IPv4路由器在每次转发时都会将该值减一。为了反映其目的，这个字段在IPv6中被更名为跳数限制。该字段中的值表示跳数。每个转发节点将该数字减一。如果路由器接收到一个跳数限制为1的数据包，它会将其减为0，丢弃该数据包，并向发送方发送ICMPv6消息“跳数限制在传输中被超越”。
- en: Source address (16 bytes)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 源地址（16字节）
- en: This field contains the IP address of the originator of the packet.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段包含数据包发起者的IP地址。
- en: Destination address (16 bytes)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目标地址（16字节）
- en: This field contains the IP address of the intended recipient of the packet.
    This can be the ultimate destination or if, for example, a Routing header is present,
    the address of the next hop router.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段包含数据包预期接收者的IP地址。这可以是最终目标地址，或者如果例如存在路由头部，则为下一跳路由器的地址。
- en: '[Figure 3-2](ch03.html#the_ipv6_header_in_a_trace_file "Figure 3-2. The IPv6
    header in a trace file") shows the IPv6 header in the trace file.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-2](ch03.html#the_ipv6_header_in_a_trace_file "图3-2. IPv6头部在跟踪文件中的显示")显示了在跟踪文件中的IPv6头部。'
- en: '![The IPv6 header in a trace file](images/ipv6_0302.png)Figure 3-2. The IPv6
    header in a trace file'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![IPv6头部在跟踪文件中的显示](images/ipv6_0302.png)图3-2. IPv6头部在跟踪文件中的显示'
- en: This trace file shows all of the header fields discussed and how they can be
    presented in a trace file. The Version field is set to 6 for IPv6\. The Traffic
    Class (Priority) and Flow Label fields are not used in this packet and are set
    to 0\. The Payload Length is 40, and the Next Header value is set to 58 for ICMPv6\.
    The Hop Limit is set to 128, and the Source and Destination addresses contain
    the link-local addresses of my IPv6 nodes. The first line in the detail window
    shows `Ethertype 0x86DD`. This value indicates that this is an IPv6 packet. For
    IPv4, the value would be `0x0800`. This field can be used to set an analyzer filter
    for all native IPv6 packets.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该跟踪文件显示了所有讨论过的头部字段以及它们如何在跟踪文件中呈现。版本字段设置为6，表示IPv6。流量类（优先级）和流标签字段在该数据包中未使用，设置为0。负载长度为40，下一头部值设置为58，表示ICMPv6。跳数限制设置为128，源地址和目标地址包含我的IPv6节点的链路本地地址。详细信息窗口中的第一行显示`Ethertype
    0x86DD`。该值表示这是一个IPv6数据包。对于IPv4，该值将是`0x0800`。此字段可用于为所有本地IPv6数据包设置分析器过滤器。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Analyzer tools can decode packets in different ways. If you use another version
    or another type of analyzer, your decode may look slightly different. The difference
    is not in the packet, but in the way the packet is presented in the analyzer interface.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 分析工具可以以不同的方式解码数据包。如果你使用的是另一个版本或其他类型的分析器，解码结果可能会稍有不同。差异不在于数据包本身，而是在分析器界面中数据包的展示方式。
- en: Extension Headers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展头
- en: The IPv4 header can be extended from a minimum of 20 bytes to a maximum of 60
    bytes in order to specify options such as Security Options, Source Routing, or
    Timestamping. This capacity has rarely been used because it causes a performance
    hit. For example, IPv4 hardware forwarding implementations have to pass the packet
    containing options to the main processor (software handling).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 头可以从最小的 20 字节扩展到最大 60 字节，以指定诸如安全选项、源路由或时间戳等选项。由于会影响性能，这种扩展很少被使用。例如，IPv4
    硬件转发实现必须将包含选项的数据包传递给主处理器（由软件处理）。
- en: 'The simpler a packet header, the faster the processing is. IPv6 has a new way
    to deal with options that has substantially improved processing: it handles options
    in additional headers called *Extension headers*. Extension headers are inserted
    into a packet only if the options are needed. And in most cases, the Extension
    headers are only processed by the final destination, not by intermediate devices.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包头越简单，处理速度越快。IPv6 采用了一种新的处理选项的方式，显著提高了处理效率：它通过额外的头（称为 *扩展头*）来处理选项。只有在需要选项时，扩展头才会被插入到数据包中。而且在大多数情况下，扩展头只会由最终目标处理，而不是由中间设备处理。
- en: 'The current IPv6 specification defines six Extension headers, which must be
    supported by all IPv6 nodes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 IPv6 规范定义了六个扩展头，这些扩展头必须被所有 IPv6 节点支持：
- en: Hop-by-Hop Options header
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐跳选项头
- en: Routing header
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由头
- en: Fragment header
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分片头
- en: Destination Options header
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标选项头
- en: Authentication header
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证头
- en: Encapsulating Security Payload header
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装安全载荷头
- en: There can be zero, one, or more than one Extension header in an IPv6 packet.
    Extension headers are placed between the IPv6 header and the upper-layer protocol
    header. Each Extension header is identified by the Next Header field in the preceding
    header. The Extension headers are examined or processed only by the node identified
    in the Destination address field of the IPv6 header. If the address in the Destination
    address field is a multicast address, the Extension headers are examined and processed
    by all the nodes belonging to that multicast group. Extension headers must be
    strictly processed in the order in which they appear in the packet header.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 IPv6 数据包中，可以有零个、一个或多个扩展头。扩展头被放置在 IPv6 头和上层协议头之间。每个扩展头由前一个头中的 Next Header
    字段来标识。扩展头只有在 IPv6 头的目标地址字段中标识的节点处才会被检查或处理。如果目标地址字段中的地址是一个组播地址，那么所有属于该组播组的节点都将检查并处理扩展头。扩展头必须严格按照它们在数据包头中出现的顺序进行处理。
- en: There is one exception to the rule that only the destination node will process
    an Extension header. If the Extension header is a Hop-by-Hop Options header, the
    information it carries must be examined and processed by every node along the
    path of the packet. The Hop-by-Hop Options header, if present, must immediately
    follow the IPv6 header. It is indicated by the value 0 in the Next Header field
    of the IPv6 header (see [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field") earlier in this chapter).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于只有目标节点会处理扩展头的规则，有一个例外。如果扩展头是逐跳选项头，则携带的信息必须由沿着数据包路径的每个节点检查和处理。逐跳选项头（如果存在）必须紧跟在
    IPv6 头之后。它通过 IPv6 头中的 Next Header 字段值 0 来指示（参见本章前面的 [表 3-1](ch03.html#values_in_the_next_header_field
    "表 3-1. Next Header 字段中的值")）。
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The first four Extension headers are described in RFC 2460\. The Authentication
    header is described in RFC 4302, and the Encapsulating Security Payload header
    in RFC 4303\. An update to the format of future Extension headers has been defined
    in RFC 6564.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个扩展头在 RFC 2460 中有所描述。认证头在 RFC 4302 中有所描述，封装安全载荷头在 RFC 4303 中有所描述。未来扩展头格式的更新已在
    RFC 6564 中定义。
- en: This architecture is very flexible for developing additional Extension headers
    for future uses as needed. New Extension headers can be defined and used without
    changing the IPv6 header. A good example is the Mobility header defined for Mobile
    IPv6 (RFC 6275), which is discussed in [Chapter 8](ch08.html "Chapter 8. Mobile
    IPv6").
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构非常灵活，可以根据需要开发额外的扩展头以供未来使用。可以定义并使用新的扩展头，而无需更改 IPv6 头部。一个很好的例子是为移动 IPv6（RFC
    6275）定义的移动性头，在[第 8 章](ch08.html "第 8 章. 移动 IPv6")中讨论。
- en: '[Figure 3-3](ch03.html#the_use_of_extension_headers "Figure 3-3. The use of
    Extension headers") shows how Extension headers are used.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-3](ch03.html#the_use_of_extension_headers "图 3-3. 扩展头的使用")展示了扩展头的使用方式。'
- en: '![The use of Extension headers](images/ipv6_0303.png)Figure 3-3. The use of
    Extension headers'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![扩展头的使用](images/ipv6_0303.png)图 3-3. 扩展头的使用'
- en: Each Extension header’s length is a multiple of eight bytes so that subsequent
    headers can always be aligned. If a node is required to process the next header
    but cannot identify the value in the Next Header field, it is required to discard
    the packet and send an ICMPv6 Parameter Problem message back to the source of
    the packet.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每个扩展头的长度是八个字节的倍数，以确保后续头可以始终对齐。如果一个节点需要处理下一个头部，但无法识别“下一个头部”字段中的值，则该节点必须丢弃数据包，并向数据包的源发送一个
    ICMPv6 参数问题消息。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: For details on ICMPv6 messages, refer to [Chapter 4](ch04.html "Chapter 4. ICMPv6").
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 ICMPv6 消息的详细信息，请参见[第 4 章](ch04.html "第 4 章. ICMPv6")。
- en: 'If more than one Extension header is used in a single packet, the following
    header order should be used (RFC 2460):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在一个数据包中使用了多个扩展头，则应使用以下头部顺序（RFC 2460）：
- en: IPv6 header
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPv6 头
- en: Hop-by-Hop Options header
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由逐跳选项头
- en: Destination Options header (for options to be processed by the first destination
    that appears in the IPv6 Destination address field, plus subsequent destinations
    listed in the Routing header)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目的地选项头（用于由 IPv6 目的地地址字段中的第一个目的地以及路由头中列出的后续目的地处理的选项）
- en: Routing header
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由头
- en: Fragment header
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分段头
- en: Authentication header
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认证头
- en: Encapsulating Security Payload header
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 封装安全有效载荷头
- en: Destination Options header (for options to be processed only by the final destination
    of the packet)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目的地选项头（仅用于由数据包最终目的地处理的选项）
- en: Upper-Layer header
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上层头
- en: RFC 2460 leaves some space for interpretation. Although this is the recommended
    order, IPv6 nodes must attempt to process Extension headers in any order. But
    it is still strongly advised that sources of IPv6 packets use the recommended
    order unless newer specifications revise it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 2460 为解释留出了一些空间。尽管这是推荐的顺序，但 IPv6 节点必须尝试以任何顺序处理扩展头。但仍强烈建议，除非有新的规范修订，否则 IPv6
    数据包的源应使用推荐的顺序。
- en: In cases when IPv6 is encapsulated in IPv4, the Upper-Layer header can be another
    IPv6 header and can contain Extension headers that have to follow the same rules.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPv6 封装在 IPv4 中的情况下，上层头可以是另一个 IPv6 头，并且可以包含必须遵循相同规则的扩展头。
- en: Hop-by-Hop Options Header
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由逐跳选项头
- en: The Hop-by-Hop Options header carries optional information that must be examined
    by every node along the path of the packet. It must immediately follow the IPv6
    header and is indicated by a Next Header value of 0\. For example, the Router
    Alert (RFC 2711) uses the Hop-by-Hop Options header for protocols such as Resource
    Reservation Protocol (RSVP), Multicast Listener Discovery (MLD) messages, or the
    Jumbogram Option. With IPv4, the only way for a router to determine whether it
    needs to examine a datagram is to at least partially parse upper-layer data in
    all datagrams. This process slows down the routing process substantially. With
    IPv6, in the absence of a Hop-by-Hop Options header, a router knows that it does
    not need to process router-specific information and can route the packet immediately
    to the final destination. If there is a Hop-by-Hop Options header, the router
    needs only to examine this header and does not have to look further into the packet.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 路由逐跳选项头携带必须由沿途每个节点检查的可选信息。它必须紧跟在 IPv6 头之后，并由“下一个头部”值为 0 表示。例如，路由器警报（RFC 2711）使用路由逐跳选项头处理像资源预留协议（RSVP）、组播监听器发现（MLD）消息或
    Jumbo 数据报选项等协议。对于 IPv4，路由器判断是否需要检查数据报的唯一方法是至少部分解析所有数据报的上层数据。这一过程会显著减缓路由过程。而在 IPv6
    中，在没有路由逐跳选项头的情况下，路由器知道不需要处理特定于路由器的信息，可以立即将数据包路由到最终目的地。如果存在路由逐跳选项头，路由器只需检查该头，而无需进一步查看数据包的其他部分。
- en: The format of the Hop-by-Hop Options header is shown in [Figure 3-4](ch03.html#format_of_the_hop-by-hop_options_header
    "Figure 3-4. Format of the Hop-by-Hop Options header").
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 逐跳选项头的格式见[图3-4](ch03.html#format_of_the_hop-by-hop_options_header "图3-4. 逐跳选项头的格式")。
- en: '![Format of the Hop-by-Hop Options header](images/ipv6_0304.png)Figure 3-4. Format
    of the Hop-by-Hop Options header'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![逐跳选项头的格式](images/ipv6_0304.png)图3-4. 逐跳选项头的格式'
- en: 'The following list describes each field:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了每个字段：
- en: '*Next Header (1 byte)*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一个头（1字节）*'
- en: The Next Header field identifies the type of header that follows the Hop-by-Hop
    Options header. The Next Header field uses the values listed in [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field"), shown earlier in this chapter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个头字段标识逐跳选项头之后的头类型。下一个头字段使用[表3-1](ch03.html#values_in_the_next_header_field
    "表3-1. 下一个头字段中的值")中列出的值，如本章前面所示。
- en: '*Extension Header Length (1 byte)*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩展头长度（1字节）*'
- en: This field identifies the length of the Hop-by-Hop Options header in eight-byte
    units. The length calculation does not include the first eight bytes. So if the
    header is shorter than eight bytes, this field contains the value 0.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此字段标识逐跳选项头的长度，以八字节为单位。长度计算不包括前八个字节。因此，如果头部小于八字节，则该字段的值为0。
- en: '*Options (variable size)*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项（可变大小）*'
- en: There can be one or more options. The length of the options is variable and
    is determined in the Header Extension Length field.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以有一个或多个选项。选项的长度是可变的，并由头扩展长度字段决定。
- en: 'The Option Type field, the first byte of the Options fields, contains information
    about how this option must be treated in case the processing node does not recognize
    the option. The value of the first two bits specifies the actions to be taken:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 选项类型字段，即选项字段的第一个字节，包含有关在处理节点无法识别选项时应如何处理该选项的信息。前两位的值指定应采取的操作：
- en: '00: Skip and continue processing.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '00: 跳过并继续处理。'
- en: '01: Discard the packet.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '01: 丢弃数据包。'
- en: '10: Discard the packet and send ICMP Parameter Problem, Code 2, message to
    the packet’s Source address pointing to the unrecognized option type.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '10: 丢弃数据包并向数据包的源地址发送ICMP参数问题消息，指向未识别的选项类型。'
- en: '11: Discard the packet and send ICMP Parameter Problem, Code 2, message to
    the packet’s Source address only if the destination is not a multicast address.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '11: 丢弃数据包并仅向数据包的源地址发送ICMP参数问题消息，代码为2，前提是目标地址不是多播地址。'
- en: The third bit of the Options Type field specifies whether the option information
    can change en route (value 1) or does not change en route (value 0).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 选项类型字段的第三位指定选项信息是否可以在路由过程中更改（值为1）或不会更改（值为0）。
- en: Option Type Jumbogram
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项类型Jumbogram
- en: This Hop-by-Hop Option Type supports the sending of IPv6 Jumbograms. The IPv6
    Payload Length field supports a maximum packet size of 65,535 bytes. The Jumbo
    Payload Option (RFC 2675) allows for larger packets to be sent.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 此逐跳选项类型支持IPv6 Jumbogram的发送。IPv6负载长度字段支持最大65,535字节的数据包大小。Jumbo Payload选项（RFC
    2675）允许发送更大的数据包。
- en: In the IPv6 header of a packet with the Jumbo Payload option, the Payload Length
    field is set to 0\. The Next Header field contains the value 0, which indicates
    a Hop-by-Hop Options header. The Option Type value of 194 indicates the Jumbo
    Payload option. The Jumbo Payload Length field has 32 bits and therefore supports
    the transmission of packets that are between 65,536 and 4,294,967,295 bytes. RFC
    2675 also defines extensions to UDP and TCP that have to be implemented on hosts
    that need to support the sending of Jumbograms. All devices on the path of a Jumbogram
    must support the option.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有Jumbo Payload选项的数据包的IPv6头中，负载长度字段设置为0。下一个头字段包含值0，表示这是一个逐跳选项头。选项类型值194表示Jumbo
    Payload选项。Jumbo Payload长度字段有32位，因此支持传输大小在65,536到4,294,967,295字节之间的数据包。RFC 2675还定义了UDP和TCP的扩展，这些扩展必须在需要支持发送Jumbogram的数据包的主机上实现。路径上的所有设备必须支持此选项。
- en: Option Router Alert
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项路由器警报
- en: This Option Type indicates to the router that the packet contains important
    information to be processed when forwarding the packet. The option is currently
    used mostly for MLD (Multicast Listener Discovery) and RSVP (Resource Reservation
    Protocol). It is specified in RFC 2711, which has been updated by RFC 6398.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项类型指示路由器数据包包含在转发时需要处理的重要信息。该选项目前主要用于MLD（多播监听发现）和RSVP（资源预留协议）。它在RFC 2711中进行了说明，并已被RFC
    6398更新。
- en: RSVP uses control packets containing information that needs to be interpreted
    or updated by routers along the path. These control packets use a Hop-by-Hop Options
    header, so only routers process the packet. Regular data packets do not have this
    Extension header and are therefore forwarded immediately without further inspection
    by the router.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: RSVP使用控制数据包，包含需要路由器沿路径进行解读或更新的信息。这些控制数据包使用逐跳选项头，因此只有路由器会处理该数据包。常规数据包没有这个扩展头，因此会立即被转发，无需路由器进一步检查。
- en: The first three bits of the Option Type field are set to 0\. A router that doesn’t
    know this option ignores it and forwards the packet. In the remaining five bits
    of the first byte, the option type 5 is specified. The Option Data Length field
    contains the value 2, which indicates that the following value field has a length
    of two bytes (refer to [Figure 3-4](ch03.html#format_of_the_hop-by-hop_options_header
    "Figure 3-4. Format of the Hop-by-Hop Options header")).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 选项类型字段的前三位设置为0。一个不认识该选项的路由器会忽略它并转发数据包。在第一个字节的剩余五位中，指定了选项类型5。选项数据长度字段包含值2，表示接下来的值字段的长度为两字节（参见[图3-4](ch03.html#format_of_the_hop-by-hop_options_header
    "图3-4。逐跳选项头格式")）。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The list of Router Alert values can be found at the following link: [http://www.iana.org/assignments/ipv6-routeralert-values](http://www.iana.org/assignments/ipv6-routeralert-values).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器警告值的列表可以在以下链接找到：[http://www.iana.org/assignments/ipv6-routeralert-values](http://www.iana.org/assignments/ipv6-routeralert-values)。
- en: '[Figure 3-5](ch03.html#the_hop-by-hop_options_header_in_a_trace "Figure 3-5. The
    Hop-by-Hop Options header in a trace file") show the Hop-by-Hop Options header
    in the trace file.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-5](ch03.html#the_hop-by-hop_options_header_in_a_trace "图3-5。跟踪文件中的逐跳选项头")展示了跟踪文件中的逐跳选项头。'
- en: '![The Hop-by-Hop Options header in a trace file](images/ipv6_0305.png.jpg)Figure 3-5. The
    Hop-by-Hop Options header in a trace file'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![逐跳选项头在跟踪文件中的展示](images/ipv6_0305.png.jpg)图3-5。逐跳选项头在跟踪文件中的展示'
- en: The screenshot shows the details of packet number 10\. It is an MLDv2 Multicast
    Listener Report Message. As mentioned before, these multicast registration messages
    always have a Hop-by-Hop Options header (Next Header value zero), because this
    is a packet that the router doesn’t have to forward, but that contains information
    that it must process. You can see the Hop Limit set to 1 for MLD messages; the
    Destination address of `ff02::16` is the multicast address for MLDv2 routers;
    the Hop-by-Hop Options header contains the next header field with the value 58
    for ICMPv6; the Length field and the Router Alert option type 5 with the value
    field zero for MLD.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 截图展示了数据包编号10的详细信息。它是一个MLDv2多播监听报告消息。如前所述，这些多播注册消息始终具有逐跳选项头（下一头部值为零），因为这是一个路由器不需要转发，但必须处理的信息包。你可以看到MLD消息的跳数限制被设置为1；`ff02::16`是MLDv2路由器的多播地址；逐跳选项头包含下一头部字段，值为58，表示ICMPv6；长度字段和路由器警告选项类型为5，值字段为零，表示MLD。
- en: Routing Header
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由头
- en: The *Routing header* is used to give a list of one or more intermediate nodes
    that should be visited on the packet’s path to its destination. In the IPv4 world,
    this is called the *Loose Source Route* option. The Routing header is identified
    by a Next Header value of 43 in the preceding header. [Figure 3-6](ch03.html#format_of_the_routing_header
    "Figure 3-6. Format of the Routing header") shows the format of the Routing header.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*路由头*用于提供一个或多个中间节点的列表，这些节点应在数据包到达目标的路径上依次访问。在IPv4中，这称为*松散源路由*选项。路由头通过前一头部中的下一头部值43来标识。[图3-6](ch03.html#format_of_the_routing_header
    "图3-6。路由头格式")展示了路由头的格式。'
- en: '![Format of the Routing header](images/ipv6_0306.png)Figure 3-6. Format of
    the Routing header'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![路由头格式](images/ipv6_0306.png)图3-6。路由头格式'
- en: 'The following list describes each field:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了每个字段：
- en: '*Next Header (1 byte)*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一头部（1字节）*'
- en: The Next Header field identifies the type of header that follows the Routing
    header. It uses the same values as the IPv4 Protocol Type field (see [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field") earlier in this chapter).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下一头部字段标识紧随路由头之后的头部类型。它使用与IPv4协议类型字段相同的值（请参见本章前面的[表3-1](ch03.html#values_in_the_next_header_field
    "表3-1。下一头部字段中的值")）。
- en: '*Extension Header Length (1 byte)*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩展头长度（1字节）*'
- en: This field identifies the length of the Routing header in 8-byte units. The
    length calculation does not include the first 8 bytes.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段标识路由头的长度，单位为8字节。长度计算不包括前8字节。
- en: '*Routing Type (1 byte)*'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*路由类型（1字节）*'
- en: This field identifies the type of Routing header. RFC 2460 describes Routing
    Type 0, which has been deprecated by RFC 5095 for security reasons. The Mobile
    IPv6 specification defines a Routing Type 2\. (This specification is discussed
    in [Chapter 8](ch08.html "Chapter 8. Mobile IPv6").) At the time of writing there
    are some drafts in progress, which define a new segment routing architecture and
    a new routing header type called Segment Routing header. Find the links to these
    drafts in the draft section at the end of this chapter. Whether this specification
    is going to see the light of day you may know by the time you read these lines.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段标识路由头的类型。RFC 2460描述了路由类型0，但由于安全原因，该类型已被RFC 5095弃用。移动IPv6规范定义了路由类型2。（此规范在[第8章](ch08.html
    "第8章。移动IPv6")中讨论。）在撰写本文时，已有一些草案正在进行中，定义了一种新的段路由架构和一种新的路由头类型，称为段路由头。可以在本章末尾的草案部分找到这些草案的链接。你阅读这些文字时，可能已经知道这个规范是否会被采纳。
- en: '*Segments Left (1 byte)*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*剩余段数（1字节）*'
- en: This field identifies how many nodes are left to be visited before the packet
    reaches its final destination.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段标识在数据包到达最终目的地之前，还有多少节点需要访问。
- en: '*Type-Specific Data (variable length)*'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型特定数据（可变长度）*'
- en: The length of this field depends on the Routing Type. The complete header is
    always a multiple of 8 bytes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段的长度取决于路由类型。完整的头部总是8字节的倍数。
- en: If a node processing a Routing header cannot identify a Routing Type value,
    the action taken depends on the content of the Segments Left field. If the Segments
    Left field does not contain any nodes to be visited, the node must ignore the
    Routing header and process the next header in the packet, which is determined
    by the Next Header field’s value. If the Segments Left field is not zero, the
    node must discard the packet and send an ICMP Parameter Problem, Code 0 message
    to the packet’s Source address pointing to the unrecognized Routing Type. If a
    forwarding node cannot process the packet because the next link MTU size is too
    small, it discards the packet and sends an ICMP Packet Too Big message back to
    the source of the packet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理路由头的节点无法识别路由类型值，则采取的操作取决于“剩余段数”字段的内容。如果“剩余段数”字段不包含任何需要访问的节点，则该节点必须忽略路由头并处理数据包中的下一个头部，该头部由“下一个头部”字段的值决定。如果“剩余段数”字段不为零，则该节点必须丢弃数据包，并向数据包的源地址发送一个ICMP参数问题代码0消息，指向未识别的路由类型。如果转发节点由于下一个链路的最大传输单元（MTU）大小过小而无法处理数据包，它会丢弃数据包并向数据包源发送ICMP数据包过大消息。
- en: '[Figure 3-7](ch03.html#routing_header_type_2_in_a_trace_file "Figure 3-7. Routing
    header Type 2 in a trace file") shows the Type 2 Routing header in a trace file.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-7](ch03.html#routing_header_type_2_in_a_trace_file "图3-7. 路由头类型2在跟踪文件中的显示")显示了跟踪文件中的类型2路由头。'
- en: '![Routing header Type 2 in a trace file](images/ipv6_0307.png.jpg)Figure 3-7. Routing
    header Type 2 in a trace file'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![跟踪文件中的路由头类型2](images/ipv6_0307.png.jpg)图3-7. 路由头类型2在跟踪文件中的显示'
- en: To show the Type 2 Routing header we must take a Mobile IPv6 trace, the specification
    that defines this type of Routing header. The Next Header field within the IPv6
    header shows the value 43 for the Routing header. The Routing header contains
    the fields discussed earlier in this section. Next Header is a Mobility header
    indicated by a Next Header value of 135 in the routing header. The Header Length
    contains two 8-byte units, which add up to a total length of 16 bytes (one address).
    The Segments Left field contains the value 1 because there is one address entry
    in the Options field. Finally, the Options field lists the Home Address option
    with the home address.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示类型2路由头，我们必须获取一个移动IPv6跟踪文件，这是定义该路由头类型的规范。IPv6头中的“下一个头部”字段显示路由头的值为43。路由头包含本节前面讨论的字段。下一个头部是一个移动性头部，路由头中的“下一个头部”值为135。头部长度包含两个8字节单元，总长度为16字节（一个地址）。剩余段数字段包含值1，因为在选项字段中有一个地址条目。最后，选项字段列出了家庭地址选项和家庭地址。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [Chapter 8](ch08.html "Chapter 8. Mobile IPv6") to find out how the
    Routing header is used for Mobility.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第8章](ch08.html "第8章。移动IPv6")了解路由头如何用于移动性。
- en: For an example of a new Routing header option, refer to RFC 6554, “An IPv6 Routing
    Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks
    (RPL).” In Low-power and Lossy Networks (LLNs), routers typically have very constrained
    memory that only allows for a small number of default routes and no other destinations.
    This RFC defines the *Source Routing Header* (SRH), which is strictly to be used
    between RPL routers.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有关新的路由头选项的示例，请参阅 RFC 6554，《用于低功耗和低丢包网络（RPL）的源路由 IPv6 路由头》。在低功耗和低丢包网络（LLNs）中，路由器通常内存非常有限，只允许少量默认路由，没有其他目标。该
    RFC 定义了*源路由头*（SRH），严格用于 RPL 路由器之间。
- en: Fragment Header
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 片段头
- en: An IPv6 host that wants to send a packet to an IPv6 destination uses Path MTU
    discovery to determine the maximum packet size that can be used on the path to
    that destination. If the packet to be sent is larger than the supported MTU, the
    source host fragments the packet. Unlike in IPv4, with IPv6 a router along the
    path does not fragment packets. Fragmentation occurs only at the source host sending
    the packet. The destination host handles reassembly. A Fragment header is identified
    by a Next Header value of 44 in the preceding header. The format of the Fragment
    header is shown in [Figure 3-8](ch03.html#format_of_the_fragment_header "Figure 3-8. Format
    of the Fragment header").
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一个希望发送数据包到 IPv6 目标的 IPv6 主机使用路径 MTU 发现来确定到该目标路径上可以使用的最大数据包大小。如果要发送的数据包大于支持的
    MTU，源主机会对数据包进行分片。与 IPv4 不同，在 IPv6 中，路径上的路由器不会对数据包进行分片。分片只发生在发送数据包的源主机处。目标主机负责重组。片段头通过前一个头部中的下一个头部值
    44 来识别。片段头的格式如[图 3-8](ch03.html#format_of_the_fragment_header "图 3-8. 片段头格式")所示。
- en: '![Format of the Fragment header](images/ipv6_0308.png)Figure 3-8. Format of
    the Fragment header'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![片段头格式](images/ipv6_0308.png)图 3-8. 片段头格式'
- en: 'The following list describes each field:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了每个字段：
- en: '*Next Header (1 byte)*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一个头部 (1 字节)*'
- en: The Next Header field identifies the type of header that follows the Fragment
    header. It uses the same values as the IPv4 Protocol Type field. (See [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field").)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个头部字段标识紧跟在片段头之后的头部类型。它使用与 IPv4 协议类型字段相同的值。（参见[表 3-1](ch03.html#values_in_the_next_header_field
    "表 3-1. 下一个头部字段中的值")。）
- en: '*Reserved (1 byte)*'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*保留字段 (1 字节)*'
- en: Not used; set to 0.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用；设置为 0。
- en: '*Fragment Offset (13 bits)*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*片段偏移量 (13 位)*'
- en: The offset in 8-byte units of the data in this packet relative to the start
    of the data in the original packet.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据包中的数据相对于原始数据包数据起始位置的 8 字节单位偏移量。
- en: '*Reserved (2 bits)*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*保留字段 (2 位)*'
- en: Not used; set to 0.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用；设置为 0。
- en: '*M-Flag (1 bit)*'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*M 标志 (1 位)*'
- en: Value 1 indicates more fragments; a value of 0 indicates the last fragment.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 值 1 表示更多片段；值 0 表示最后一个片段。
- en: '*Identification (4 Bytes)*'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '*标识符 (4 字节)*'
- en: Generated by the source host in order to identify all packets belonging to the
    original packet. This field is usually implemented as a counter, increasing by
    one for every packet that needs to be fragmented by the source host.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由源主机生成，用以识别属于原始数据包的所有数据包。该字段通常实现为一个计数器，每个需要源主机分片的数据包计数增加 1。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Fragment header does not contain a Don’t Fragment field as in IPv4\. It
    is not necessary, because routers no longer fragment in IPv6\. Only the source
    host can fragment a packet.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 片段头不包含像 IPv4 中的“不分片”字段。因为路由器在 IPv6 中不再进行分片，所以不再需要该字段。只有源主机可以对数据包进行分片。
- en: The initial unfragmented packet is referred to as the *original packet*. It
    has an unfragmentable part that consists of the IPv6 header plus any Extension
    headers that must be processed by nodes along the path to the destination (i.e.,
    Hop-by-Hop Options header). The fragmentable part of the original packet consists
    of any Extension headers that need only to be processed by the final destination,
    plus the Upper-Layer headers and any data. [Figure 3-9](ch03.html#fragmentation_with_ipv6
    "Figure 3-9. Fragmentation with IPv6") (RFC 2460) illustrates the fragmenting
    process.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 初始未分片的数据包称为*原始数据包*。它具有一个不可分片部分，包括 IPv6 头部及任何必须由沿路径到目标节点的节点处理的扩展头（即逐跳选项头）。原始数据包的可分片部分包括任何只需要由最终目标处理的扩展头，以及上层头部和任何数据。[图
    3-9](ch03.html#fragmentation_with_ipv6 "图 3-9. IPv6 片段化")（RFC 2460）说明了分片过程。
- en: '![Fragmentation with IPv6](images/ipv6_0309.png)Figure 3-9. Fragmentation with
    IPv6'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![IPv6 片段化](images/ipv6_0309.png)图 3-9. IPv6 片段化'
- en: The unfragmentable part of the original packet appears in every fragment, followed
    by the Fragmentation header and then the fragmentable data. The IPv6 header of
    the original packet has to be slightly modified. The Length field reflects the
    length of the fragment (excluding the IPv6 header) and not the length of the original
    packet.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据包的不可分段部分出现在每个片段中，接着是片段头部，然后是可分段数据。原始数据包的 IPv6 头部必须稍作修改。长度字段反映的是片段的长度（不包括
    IPv6 头部），而不是原始数据包的长度。
- en: The destination node collects all the fragments and reassembles them. The fragments
    must have identical Source and Destination addresses and the same identification
    value in order to be reassembled. If all fragments do not arrive at the destination
    within 60 seconds after the first fragment, the destination will discard all packets.
    If the destination has received the first fragment (Offset = zero), it sends back
    an ICMPv6 Fragment Reassembly Time Exceeded message to the source.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 目标节点收集所有片段并重新组装它们。片段必须具有相同的源地址和目标地址，并且相同的标识值才能重新组装。如果所有片段在第一个片段之后的 60 秒内没有到达目标，目标将丢弃所有数据包。如果目标已经收到第一个片段（偏移量
    = 0），它会向源发送一个 ICMPv6 片段重组超时消息。
- en: '[Figure 3-10](ch03.html#fragment_header_in_a_trace_file "Figure 3-10. Fragment
    header in a trace file") shows a Fragment header.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-10](ch03.html#fragment_header_in_a_trace_file "图 3-10. 跟踪文件中的片段头部") 显示了一个片段头部。'
- en: '![Fragment header in a trace file](images/ipv6_0310.png.jpg)Figure 3-10. Fragment
    header in a trace file'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![跟踪文件中的片段头部](images/ipv6_0310.png.jpg)图 3-10. 跟踪文件中的片段头部'
- en: The whole fragment set consists of two packets, the first of which is shown
    in [Figure 3-10](ch03.html#fragment_header_in_a_trace_file "Figure 3-10. Fragment
    header in a trace file"). In the IPv6 header, the Payload Length field has a value
    of 1,456, which is the length of the fragmentation header and this one fragment,
    not the length of the whole original packet. The Next Header field specifies the
    value 44, which is the value for the Fragment header. This field is followed by
    the Hop Limit field and the Source and Destination IP addresses. The first field
    in the Fragment header is the Next Header field. Because this is a ping, it contains
    the value 58 for ICMPv6\. And because this is the first packet in the fragment
    set, the value in the Offset field is 0 and the M-Flag is set to 1, which means
    there are more fragments to come. The Identification field is set to 1 and has
    to be identical in all packets belonging to this fragment set. [Figure 3-11](ch03.html#the_last_packet_in_the_fragment_set
    "Figure 3-11. The last packet in the fragment set") shows the second packet of
    the fragment set.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 整个片段集由两个数据包组成，第一个数据包如[图 3-10](ch03.html#fragment_header_in_a_trace_file "图 3-10.
    跟踪文件中的片段头部")所示。在 IPv6 头部，负载长度字段的值为 1,456，这是片段头部和该单个片段的长度，而不是整个原始数据包的长度。下一个头部字段指定值
    44，这是片段头部的值。该字段后面是跳数限制字段、源地址和目标地址。片段头部的第一个字段是下一个头部字段。因为这是一个 ping 请求，它包含 ICMPv6
    的值 58。由于这是片段集中的第一个数据包，偏移量字段的值为 0，M 标志设置为 1，表示还有更多片段将到来。标识字段设置为 1，并且在属于该片段集的所有数据包中必须相同。[图
    3-11](ch03.html#the_last_packet_in_the_fragment_set "图 3-11. 片段集中的最后一个数据包") 显示了片段集中的第二个数据包。
- en: '![The last packet in the fragment set](images/ipv6_0311.png.jpg)Figure 3-11. The
    last packet in the fragment set'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![片段集中的最后一个数据包](images/ipv6_0311.png.jpg)图 3-11. 片段集中的最后一个数据包'
- en: The second and last packet of this fragment set has an Offset value of `0x00b5`,
    which translates to 181 in decimal notation, the length of the first fragment.
    The M-Flag is set to 0, which indicates that it is the last packet and tells the
    receiving host that it is time to reassemble the fragments. The Identification
    field is set to 1 in both packets.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该片段集中的第二个和最后一个数据包的偏移量值为 `0x00b5`，转换为十进制为 181，即第一个片段的长度。M 标志设置为 0，表示这是最后一个数据包，并通知接收主机开始重组片段。标识字段在两个数据包中都设置为
    1。
- en: The specification in RFC 2460 allows for overlapping fragments, which creates
    a security issue. RFC 5722, “Handling of Overlapping IPv6 Fragments,” explains
    the security issue, updates RFC 2460 and forbids overlapping fragments. RFC 6980
    describes how IPv6 fragmentation can become a security issue by eliminating the
    effectiveness of securing mechanisms such as RA Guard and forbids the use of IPv6
    Fragmentation for traditional Neighbor Discovery messages.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 2460中的规范允许重叠片段，这会造成安全问题。RFC 5722《IPv6重叠片段的处理》解释了这一安全问题，并更新了RFC 2460，禁止重叠片段。RFC
    6980描述了IPv6片段化如何成为安全问题，通过消除RA Guard等安全机制的有效性，禁止在传统邻居发现消息中使用IPv6片段化。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [Chapter 4](ch04.html "Chapter 4. ICMPv6") for a description of Neighbor
    Discovery and to [Chapter 6](ch06.html "Chapter 6. Security with IPv6") for a
    discussion of RA Guard and the security implications of the Fragment header.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第4章](ch04.html "第4章. ICMPv6")了解邻居发现的描述，参见[第6章](ch06.html "第6章. IPv6安全性")讨论RA
    Guard及其对片段头部的安全影响。
- en: Destination Options Header
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目的地选项头部
- en: A *Destination Options* header carries optional information that is examined
    by the destination node only (the Destination address in the IPv6 header). A Next
    Header value of 60 identifies this type of header. As mentioned previously, the
    Destination Options header can appear twice in an IPv6 packet. When inserted before
    a Routing header, it contains information to be processed by the routers listed
    in the Routing header. When inserted before the upper-layer protocol headers,
    it contains information for the final destination of the packet. [Figure 3-12](ch03.html#format_of_the_destination_options_header
    "Figure 3-12. Format of the Destination Options header") shows the format of the
    Destination Options header.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*目的地选项*头部携带仅由目的地节点（IPv6头部中的目的地地址）检查的可选信息。一个值为60的下一头部标识这种类型的头部。如前所述，目的地选项头部可以在IPv6数据包中出现两次。当它插入在路由头部之前时，它包含供路由器处理的信息，这些路由器在路由头部中列出。当它插入在上层协议头部之前时，它包含供数据包最终目的地处理的信息。[图3-12](ch03.html#format_of_the_destination_options_header
    "图3-12. 目的地选项头部的格式")显示了目的地选项头部的格式。'
- en: '![Format of the Destination Options header](images/ipv6_0312.png)Figure 3-12. Format
    of the Destination Options header'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![目的地选项头部的格式](images/ipv6_0312.png)图3-12. 目的地选项头部的格式'
- en: 'As you can see, the format is similar to the format of the Hop-by-Hop Options
    header. The following list describes each field:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，格式类似于“跳跃选项”头部的格式。以下列表描述了每个字段：
- en: '*Next Header (1 byte)*'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一头部（1字节）*'
- en: The Next Header field identifies the type of header that follows the Destination
    Options header. It uses the same values listed in [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field"), shown earlier in this chapter.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 下一头部字段标识紧随目的地选项头部的头部类型。它使用[表3-1](ch03.html#values_in_the_next_header_field "表3-1.
    下一头部字段中的值")中列出的相同值，该表在本章前面已经展示过。
- en: '*Extension Header Length (1 byte)*'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩展头部长度（1字节）*'
- en: This field identifies the length of the Destination Options header in 8-byte
    units. The length calculation does not include the first 8 bytes.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段标识目的地选项头部的长度，单位为8字节。长度计算不包括前8个字节。
- en: '*Options (variable size)*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项（可变大小）*'
- en: There can be one or more options. The length of the options is variable and
    is determined in the Header Extension Length field.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可以有一个或多个选项。选项的长度是可变的，并由头部扩展长度字段确定。
- en: The Options field is used in a similar way as with the Hop-by-Hop Options header,
    which I discussed earlier in this chapter. An example of the use of the Destination
    Options header is Mobile IPv6\. You can find a detailed description of Mobile
    IPv6 in [Chapter 8](ch08.html "Chapter 8. Mobile IPv6"). Another defined Destination
    Option Header option is the *Tunnel Encapsulation Limit Option* in RFC 2473, “Generic
    Packet Tunneling in IPv6 Specification,” which is used to limit the number of
    times that a packet can be further encapsulated.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 选项字段的使用方式与“跳跃选项”头部相似，我在本章之前讨论过这个头部。目的地选项头部的一个使用示例是移动IPv6。您可以在[第8章](ch08.html
    "第8章. 移动IPv6")找到有关移动IPv6的详细描述。另一个定义的目的地选项头部选项是RFC 2473中的*隧道封装限制选项*，该选项用于限制数据包被进一步封装的次数。
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Find the most current list of defined options for the Routing and the Destination
    Options header at [http://www.iana.org/assignments/ipv6-parameters/](http://www.iana.org/assignments/ipv6-parameters/).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://www.iana.org/assignments/ipv6-parameters/](http://www.iana.org/assignments/ipv6-parameters/)查找最新的路由和目标选项头的定义选项列表。
- en: '[Figure 3-13](ch03.html#destination_options_header_in_the_trace "Figure 3-13. Destination
    Options header in the trace file") shows the Destination Options header in the
    trace file.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-13](ch03.html#destination_options_header_in_the_trace "图3-13. 跟踪文件中的目标选项头")显示了跟踪文件中的目标选项头。'
- en: '![Destination Options header in the trace file](images/ipv6_0313.png.jpg)Figure 3-13. Destination
    Options header in the trace file'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![跟踪文件中的目标选项头](images/ipv6_0313.png.jpg)图3-13. 跟踪文件中的目标选项头'
- en: To show the Destination Options header, we refer to the Mobile IPv6 trace again.
    This is a Binding Update message. It uses the Destination Options header with
    value 60 in the Next Header field of the IP header. The Destination Options header
    has a Next Header field with the value 135 for a Mobile IPv6 message and contains
    the Home Address option and the home address for the mobile node.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示目标选项头，我们再次参考移动IPv6跟踪。这是一个绑定更新消息。它在IP头的下一个头字段中使用值60的目标选项头。目标选项头的下一个头字段值为135，表示移动IPv6消息，并包含家庭地址选项和移动节点的家庭地址。
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [Chapter 8](ch08.html "Chapter 8. Mobile IPv6") to find out how the
    Destination Options header is used for Mobility.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第8章](ch08.html "第8章. 移动IPv6")，了解目标选项头如何用于移动性。
- en: New Extension Header Format
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新扩展头格式
- en: With the exception of the Hop-by-Hop and Routing header, Extension headers are
    usually only processed by the final destination of a packet. In practice there
    are devices on the path of a packet, such as routers and firewalls, which are
    capable of parsing past or ignoring Extension headers at wire speed. In order
    to accommodate real-world implementations and to optimize Extension header processing
    and inspection of Extension headers, a new format for Extension headers has been
    defined in RFC 6564, “A Uniform Format for IPv6 Extension Headers.” [Figure 3-14](ch03.html#the_new_extension_header_format
    "Figure 3-14. The new Extension header format") shows the new format.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 除了逐跳和路由头外，扩展头通常仅由数据包的最终目的地处理。实际上，数据包路径中的设备，如路由器和防火墙，能够以线速解析或忽略扩展头。为了适应现实世界中的实现并优化扩展头的处理和检查，RFC
    6564中定义了一种新的扩展头格式，标题为《IPv6扩展头的统一格式》。图3-14显示了新的格式。
- en: '![The new Extension header format](images/ipv6_0314.png)Figure 3-14. The new
    Extension header format'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![新扩展头格式](images/ipv6_0314.png)图3-14. 新的扩展头格式'
- en: 'The following list describes each field:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表描述了每个字段：
- en: '*Next Header (1 byte)*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*下一个头（1字节）*'
- en: The Next Header field identifies the type of header that follows the Extension
    header. It uses the same values listed in [Table 3-1](ch03.html#values_in_the_next_header_field
    "Table 3-1. Values in the Next Header field"), shown earlier in this chapter.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个头字段标识扩展头之后的头类型。它使用[表3-1](ch03.html#values_in_the_next_header_field "表3-1.
    下一个头字段的值")中列出的相同值，表3-1在本章前面已经展示。
- en: '*Extension Header Length (1 byte)*'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩展头长度（1字节）*'
- en: This field identifies the length of the Extension header in 8-byte units. The
    length calculation does not include the first 8 bytes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段标识扩展头的长度，单位为8字节。长度计算不包括前8个字节。
- en: '*Options (variable size)*'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*选项（可变大小）*'
- en: The length of the options is variable and is determined in the Header Extension
    Length field.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 选项的长度是可变的，并在扩展头长度字段中确定。
- en: The format of the basic Extension headers described in this chapter will not
    change. But if new Extension headers are defined in the future, they must follow
    this format. This means that any device that deals with Extension headers, such
    as firewalls, must be capable of properly processing the basic Extension headers,
    but also new Extension headers using the new format.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述的基本扩展头格式不会改变。但是，如果未来定义新的扩展头，它们必须遵循此格式。这意味着任何处理扩展头的设备，如防火墙，必须能够正确处理基本扩展头，同时也能处理使用新格式的扩展头。
- en: 'Several rules are defined in RFC 6564 and summarized below:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 6564中定义了几条规则，并在下面总结：
- en: If possible, no new Extension headers should be defined, but rather new options
    for the Destination Options header. Only if that is not possible can a new Extension
    header be defined.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，应该避免定义新的扩展头，而是为目标选项头定义新的选项。只有在无法做到这一点时，才能定义新的扩展头。
- en: No new header with hop-by-hop behavior must be created, and new options for
    the existing Hop-by-Hop Options header should only be created under limited circumstances.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不得创建新的逐跳行为头，并且只有在有限情况下，才应为现有的逐跳选项头创建新选项。
- en: Processing of Extension Headers and Header Chain Length
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展头与头链长度的处理
- en: The base specification in RFC 2460 says that Extension headers are only processed
    by end nodes (with the exception of the Hop-by-Hop Options header). The goal of
    this architecture was that new Extension headers can be introduced and only end
    nodes need to be updated. This process would be transparent to forwarding nodes
    along the path of the packet. Practice has shown that this is not always applicable.
    Some routers and a variety of intermediate boxes such as firewalls, load balancers,
    and packet classifiers, also called middleware, might inspect other parts of the
    IP header beyond the IPv6 base header. Very often, if they do not recognize an
    Extension header, they simply drop the packet, which leads to connectivity failures.
    Also the Hop-by-Hop Extension header is often not handled by high-speed routers
    or is processed on a slow path.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 2460 中的基础规范规定，扩展头仅由终端节点处理（逐跳选项头除外）。该架构的目标是，新的扩展头可以被引入，并且只有终端节点需要更新。这个过程对路径中的转发节点是透明的。实践表明，这并非总是适用。一些路由器和多种中间设备，如防火墙、负载均衡器和数据包分类器，也被称为中间件，可能会检查超出
    IPv6 基础头的 IP 头的其他部分。通常，如果它们不识别某个扩展头，它们会直接丢弃包，这会导致连接失败。此外，逐跳扩展头通常不会被高速路由器处理，或者是在慢路径上处理。
- en: RFC 7045, “Transmission and Processing of Extension Headers,” discusses these
    issues. While according to the base specification, end nodes should discard Extension
    headers that they don’t recognize, this should not be done by forwarding devices
    on the path of a packet. Otherwise, these forwarding devices may discard packets
    with newly defined Extension headers that they don’t recognize yet. The RFC says
    that there should be a policy on these devices to be individually configurable.
    The default configuration should allow all standard Extension headers. For firewalls,
    the RFC requires that, in particular, packets containing standard Extension headers
    are only to be discarded as a result of an intentionally configured policy. For
    the Hop-by-Hop Extension header the requirement is that all forwarding devices
    should process it, but implementers have to be aware that this usually happens
    on a slow path.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 7045《扩展头的传输与处理》讨论了这些问题。根据基础规范，终端节点应丢弃它们不识别的扩展头，但路径中的转发设备不应这样做。否则，这些转发设备可能会丢弃那些它们尚未识别的带有新定义扩展头的包。RFC
    规定，这些设备应该有一个可以单独配置的策略。默认配置应允许所有标准扩展头。对于防火墙，RFC 规定，特别是含有标准扩展头的包，只有在经过故意配置的策略下才会被丢弃。对于逐跳扩展头，要求所有转发设备都应处理它，但实现者需要意识到，这通常发生在慢路径上。
- en: Another problem was that there was not one single place where all Extension
    headers can be found and the number may increase regularly as new specifications
    come out. So it is difficult for vendors to identify what Extension headers they
    have to support in their implementations. The RFC therefore defines that there
    must be a new section in the IANA (Internet Assigned Numbers Authority) IPv6 Parameters
    section to list all IPv6 Extension header types.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，没有一个单一的地方可以找到所有的扩展头，而且随着新规范的发布，扩展头的数量可能会定期增加。因此，厂商很难确定他们在实现中需要支持哪些扩展头。因此，RFC
    定义必须在 IANA（互联网号码分配局）IPv6 参数部分新增一个区域，以列出所有 IPv6 扩展头类型。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The new IANA registry section for [IPv6 Extension header](ch05.html#ipv6_extension_header
    "IPv6 Extension header") can be found at [http://bit.ly/1na7H1Q](http://bit.ly/1na7H1Q).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 IANA 注册表部分可以在 [IPv6 扩展头](ch05.html#ipv6_extension_header "IPv6 Extension
    header") 中找到，链接地址为 [http://bit.ly/1na7H1Q](http://bit.ly/1na7H1Q)。
- en: 'With regard to the header chain (which includes the IPv6 header, any Extension
    headers, plus the upper protocol header), note the following: in IPv4 we had a
    fixed upper limit for the size of all IPv4 options in an IPv4 packet. In the IPv6
    base specification there is no limit to the number of Extension headers in a packet.
    So it is possible that when a packet is fragmented, the header chain may span
    multiple fragments. This causes problems, specifically if firewalls cannot apply
    rules to fragments, because the information they need is missing in the first
    fragment. RFC 7112, “Implications of Oversized IPv6 Header Chains,” describes
    the issue and updates RFC 2460 such that the first fragment of a fragmented datagram
    is required to contain the entire IPv6 header chain.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 关于头链（包括IPv6头、任何扩展头和上层协议头），请注意以下事项：在IPv4中，我们对IPv4数据包中所有IPv4选项的大小有固定的上限。在IPv6基础规范中，数据包中扩展头的数量没有限制。因此，当数据包被分段时，头链可能会跨越多个片段。这会导致问题，特别是当防火墙无法对片段应用规则时，因为它们需要的信息在第一个片段中缺失。RFC
    7112, “超大IPv6头链的影响”，描述了这个问题，并更新了RFC 2460，要求分段数据报的第一个片段必须包含完整的IPv6头链。
- en: Now that you are familiar with the IPv6 header and the Extension headers, the
    next chapter introduces the advanced features of ICMPv6, which offer management
    functionality not known with ICMPv4.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经熟悉了IPv6头和扩展头，下一章将介绍ICMPv6的高级功能，这些功能提供了ICMPv4中没有的管理功能。
- en: References
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: The following is a list of the most important RFCs and drafts mentioned in this
    chapter. Sometimes I include additional subject-related RFCs for your personal
    further study.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提到的最重要的RFC和草案列表。有时我还会包括一些附加的与主题相关的RFC，供您个人进一步学习。
- en: RFCs
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RFCs
- en: RFC 791, “Internet Protocol,” 1981
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 791, “互联网协议”，1981
- en: RFC 1812, “Requirements for IP Version 4 Routers,” 1995
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 1812, “IP版本4路由器要求”，1995
- en: RFC 1819, “Internet Stream Protocol Version 2,” 1995
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 1819, “互联网流协议版本2”，1995
- en: RFC 1981, “Path MTU Discovery for IP version 6,” 1996
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 1981, “IP版本6的路径MTU发现”，1996
- en: RFC 2460, “Internet Protocol, Version 6 (IPv6) Specification,” 1998
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2460, “互联网协议，第6版（IPv6）规范”，1998
- en: RFC 2473, “Generic Packet Tunneling in IPv6 Specification,” 1998
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2473, “IPv6中通用数据包隧道化规范”，1998
- en: RFC 2474, “Definition of the Differentiated Services Field (DS Field),” 1998
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2474, “区分服务字段（DS字段）的定义”，1998
- en: RFC 2475, “An Architecture for Differentiated Services,” 1998
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2475, “区分服务架构”，1998
- en: RFC 2507, “IP Header Compression,” 1999
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2507, “IP头压缩”，1999
- en: RFC 2675, “IPv6 Jumbograms,” 1999
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2675, “IPv6大数据包”，1999
- en: RFC 2711, “IPv6 Router Alert Option,” 1999
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2711, “IPv6路由器警报选项”，1999
- en: RFC 3168, “The Addition of Explicit Congestion Notification (ECN) to IP,” 2001
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 3168, “显式拥塞通知（ECN）添加到IP中”，2001
- en: RFC 3175, “Aggregation of RSVP for IPv4 and IPv6 Reservations,” 2001
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 3175, “IPv4和IPv6预留的RSVP聚合”，2001
- en: RFC 3514, “The Security Flag in the IPv4 Header,” April 1, 2003
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 3514, “IPv4头中的安全标志”，2003年4月1日
- en: RFC 4301, “Security Architecture for the Internet Protocol,” 2005
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 4301, “互联网协议的安全架构”，2005
- en: RFC 4302, “IP Authentication Header,” 2005
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 4302, “IP认证头”，2005
- en: RFC 4303, “IP Encapsulating Security Payload (ESP),” 2005
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 4303, “IP封装安全负载（ESP）”，2005
- en: RFC 4305, “Cryptographic Algorithm Implementation Requirements for Encapsulating
    Security Payload (ESP) and Authentication Header (AH),” 2005
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 4305, “封装安全负载（ESP）和认证头（AH）的加密算法实现要求”，2005
- en: RFC 4727, “Experimental Values in IPv4, IPv6, ICMPv4, ICMPv6, UDP, and TCP Headers,”
    2006
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 4727, “IPv4、IPv6、ICMPv4、ICMPv6、UDP和TCP头中的实验值”，2006
- en: RFC 5095, “Deprecation of Type 0 Routing Headers in IPv6,” 2007
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 5095, “IPv6中类型0路由头的废弃”，2007
- en: RFC 5350, “IANA Considerations for the IPv4 and IPv6 Router Alert Options,”
    2008
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 5350, “IPv4和IPv6路由器警报选项的IANA考虑”，2008
- en: RFC 5722, “Handling of Overlapping IPv6 Fragments,” 2009
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 5722, “重叠IPv6片段的处理”，2009
- en: RFC 5871, “IANA Allocation Guidelines for the IPv6 Routing Header,” 2010
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 5871, “IPv6路由头的IANA分配指南”，2010
- en: RFC 6105, “IPv6 Router Advertisement Guard,” 2011
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6105, “IPv6路由器广告保护”，2011
- en: RFC 6275, “Mobility Support in IPv6,” 2011
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6275, “IPv6中的移动性支持”，2011
- en: RFC 6398, “IP Router Alert Considerations and Usage,” 2011
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6398, “IP路由器警报的考虑和使用”，2011
- en: RFC 6434, “IPv6 Node Requirements,” 2011
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6434, “IPv6节点要求”，2011
- en: RFC 6437, “IPv6 Flow Label Specification,” 2011
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6437, “IPv6流标签规范”，2011
- en: RFC 6553, “The Routing Protocol for Low-Power and Lossy Networks (RPL) Option
    for Carrying RPL Information in Data-Plane Datagrams,” 2012
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6553, “低功耗和丢包网络（RPL）协议中用于承载 RPL 信息的数据平面数据报选项”，2012
- en: RFC 6554, “An IPv6 Routing Header for Source Routes with the Routing Protocol
    for Low-Power and Lossy Networks (RPL),” 2012
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6554, “用于源路由的 IPv6 路由头，结合低功耗和丢包网络（RPL）协议”，2012
- en: RFC 6564, “A Uniform Format for IPv6 Extension Headers,” 2012
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6564, “IPv6 扩展头的统一格式”，2012
- en: RFC 6621, “Simplified Multicast Forwarding,” 2012
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6621, “简化的多播转发”，2012
- en: RFC 6946, “Processing of IPv6 ‘Atomic’ Fragments,” 2013
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6946, “IPv6 ‘原子’分片的处理”，2013
- en: RFC 6980, “Security Implications of IPv6 Fragmentation with IPv6 Neighbor Discovery,”
    2013
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 6980, “IPv6 分片与 IPv6 邻居发现的安全影响”，2013
- en: RFC 7045, “Transmission and Processing of IPv6 Extension Headers,” 2014
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 7045, “IPv6 扩展头的传输和处理”，2014
- en: RFC 7112, “Implications of Oversized IPv6 Header Chains,” 2014
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 7112, “超大 IPv6 头链的影响”，2014
- en: RFC 7113, “Implementation Advice for IPv6 Router Advertisement Guard (RA Guard),”
    2014
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 7113, “IPv6 路由器广告保护（RA Guard）实施建议”，2014
- en: RFC 7136, “Significance of IPv6 Interface Identifiers,” 2014
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 7136, “IPv6 接口标识符的重要性”，2014
- en: Drafts
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草案
- en: Drafts can be found at [http://www.ietf.org/ID.html](http://www.ietf.org/ID.html).
    To locate the latest version of a draft, refer to [https://datatracker.ietf.org/public/pidtracker.cgi](https://datatracker.ietf.org/public/pidtracker.cgi).
    You can enter the draft name without a version number and the most current version
    will come up. If a draft does not show up, it was possibly deleted. If it was
    published as an RFC, the RFC number will be displayed. [http://tools.ietf.org/wg](http://tools.ietf.org/wg)
    is also a very useful site. More information on the process of standardization,
    RFCs, and drafts can be found in [Appendix A](apa.html "Appendix A. RFCs").
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 草案可以在 [http://www.ietf.org/ID.html](http://www.ietf.org/ID.html) 上找到。要查找草案的最新版本，请参考
    [https://datatracker.ietf.org/public/pidtracker.cgi](https://datatracker.ietf.org/public/pidtracker.cgi)。您可以输入草案名称，不带版本号，最新版本会自动显示。如果草案未显示，可能已经被删除。如果它已发布为
    RFC，则会显示 RFC 编号。[http://tools.ietf.org/wg](http://tools.ietf.org/wg) 也是一个非常有用的网站。关于标准化过程、RFC
    和草案的更多信息可以在 [附录 A](apa.html "附录 A. RFCs") 中找到。
- en: 'Here’s a list of drafts I refer to in this chapter, as well as interesting
    drafts that relate to the topics in this chapter:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在本章中参考的草案列表，以及与本章主题相关的一些有趣草案：
- en: “Segment Routing Architecture”
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: “分段路由架构”
- en: '*draft-filsfils-spring-segment-routing-02*'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*draft-filsfils-spring-segment-routing-02*'
- en: “Segment Routing Use Cases”
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: “分段路由使用案例”
- en: '*draft-filsfils-spring-segment-routing-use-cases-00*'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*draft-filsfils-spring-segment-routing-use-cases-00*'
- en: “IPv6 Segment Routing Header (SRH)”
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: “IPv6 分段路由头（SRH）”
- en: '*draft-previdi-6man-segment-routing-header-00*'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*draft-previdi-6man-segment-routing-header-00*'
