- en: Chapter 9\. Leveraging Text Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。利用文本文件
- en: Plain text is the most common data format on many Linux systems. The content
    sent from command to command in most pipelines is text. Programmers’ source code
    files, system configuration files in */etc*, and HTML and Markdown files are all
    text files. Email messages are text; even attachments are stored as text internally
    for transport. You might even store everyday files like shopping lists and personal
    notes as text.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多 Linux 系统上，纯文本是最常见的数据格式。大多数管道中从命令到命令发送的内容都是文本。程序员的源代码文件、系统配置文件（位于 */etc*）、HTML
    和 Markdown 文件都是文本文件。电子邮件消息是文本；即使是附件也以文本形式内部存储以进行传输。你甚至可以将像购物清单和个人笔记这样的日常文件存储为文本。
- en: Contrast this with today’s internet, which is a mishmash of streaming audio
    and video, social media posts, in-browser documents in Google Docs and Office
    365, PDFs, and other rich media. (Not to mention the data handled by mobile apps,
    which have hidden the concept of a “file” from a whole generation.) Against this
    backdrop, plain-text files seem almost quaint.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与今天的互联网形成对比，后者充斥着流媒体音频和视频、社交媒体帖子、Google Docs 和 Office 365 中的浏览器文档、PDF 和其他富媒体。
    （更不用说移动应用程序处理的数据，这些应用程序已经将“文件”的概念隐藏起来，成为整个一代人的隐喻。）在这样的背景下，纯文本文件似乎显得有些古老。
- en: 'Nevertheless, any text file can become a rich source of data that you can mine
    with carefully crafted Linux commands, especially if the text is structured. Each
    line in the file */etc/passwd*, for example, represents a Linux user and has seven
    fields, including username, numeric user ID, home directory, and more. The fields
    are separated by colons, making the file easily parsed by `cut -d:` or `awk -F:`.
    Here’s a command that prints all usernames (the first field) alphabetically:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，任何文本文件都可以成为你可以用精心设计的 Linux 命令挖掘的丰富数据源，特别是如果文本是结构化的。例如，文件 */etc/passwd* 中的每一行代表一个
    Linux 用户，具有七个字段，包括用户名、数字用户 ID、主目录等。这些字段由冒号分隔，使得文件可以轻松被 `cut -d:` 或 `awk -F:` 解析。这里有一个按字母顺序打印所有用户名（第一个字段）的命令：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And here’s one that separates human users from system accounts by their numeric
    user IDs and sends users a welcome email. Let’s build this brash one-liner step-by-step.
    First, use `awk` to print the usernames (field 1) when the numeric user ID (field
    3) is 1000 or greater:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子，通过数字用户 ID 将人类用户与系统帐户分开，并向用户发送欢迎电子邮件。让我们逐步构建这个大胆的单行代码。首先使用 `awk` 打印用户名（第一个字段），当数字用户
    ID（第三个字段）为 1000 或更大时：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then produce greetings by piping to `xargs`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过管道传递给 `xargs` 生成问候语：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then generate commands (strings) to pipe each greeting to the `mail` command,
    which sends email to a given user with a given subject line (`-s`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后生成命令（字符串），通过 `mail` 命令将每个问候发送给指定用户，带有给定的主题行（`-s`）：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, pipe the generated commands to `bash` to send the emails:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将生成的命令通过管道传递给 `bash` 发送电子邮件：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding solutions, like many others in this book, begin with an existing
    text file and manipulate its contents with commands. It’s time to reverse that
    approach and intentionally *design new text files* that partner well with Linux
    commands.^([1](ch09.xhtml#idm46586638536576)) This is a winning strategy to get
    work done efficiently on a Linux system. All it takes is four steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 像本书中的许多其他解决方案一样，这些解决方案从现有的文本文件开始，并使用命令操作其内容。现在是时候扭转这种方法，有意*设计新的文本文件*，以便与 Linux
    命令良好合作。这是在 Linux 系统上高效完成工作的一种成功策略，只需四个步骤：
- en: Notice a business problem you want to solve that involves data.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意你想解决的涉及数据的业务问题。
- en: Store the data in a text file in a convenient format.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据以便捷的格式存储在文本文件中。
- en: Invent Linux commands that process the file to solve the problem.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发明 Linux 命令来处理文件以解决问题。
- en: (*Optional*.) Capture those commands in scripts, aliases, or functions to be
    simpler to run.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*。）将这些命令捕获在脚本、别名或函数中，以简化运行。
- en: In this chapter, you’ll construct a variety of structured text files, and create
    commands to process them, to solve several business problems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将构建各种结构化文本文件，并创建命令来处理它们，以解决几个业务问题。
- en: 'A First Example: Finding Files'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个例子：查找文件
- en: 'Suppose your home directory contains tens of thousands of files and subdirectories,
    and every so often, you can’t remember where you put one of them. The `find` command
    locates a file by name, such as *animals.txt*:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的主目录包含数万个文件和子目录，而且经常会忘记其中一个文件的位置。`find` 命令可以按文件名（例如 *animals.txt*）定位文件：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'but `find` is slow because it searches your entire home directory, and you
    need to locate files regularly. This is step 1, noticing a business problem that
    involves data: finding files in your home directory quickly by name.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但`find`很慢，因为它搜索整个主目录，而且你需要定期定位文件。这是第1步，注意到涉及数据的业务问题：通过名称快速在你的主目录中找到文件。
- en: 'Step 2 is storing the data in a text file in a convenient format. Run `find`
    once to build a list of all your files and directories, one file path per line,
    and store it in a hidden file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步是以方便的格式将数据存储在文本文件中。运行`find`一次，以构建所有文件和目录的列表，每行一个文件路径，并将其存储在一个隐藏文件中：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now you have the data: a line-by-line index of your files. Step 3 is inventing
    Linux commands to speed up searches for files, and for that, use `grep`. It’s
    much quicker to `grep` through a large file than to run `find` in a large directory
    tree:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有数据：文件的逐行索引。第3步是发明Linux命令以加快文件搜索，为此使用`grep`。在大型文件中进行`grep`要比在大型目录树中运行`find`快得多：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Step 4 is to make the command easier to run. Write a one-line script named `ff`,
    for “find files,” that runs `grep` with any user-supplied options and a search
    string, as in [Example 9-1](#ex_ff).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步是使命令更易于运行。编写一个名为`ff`的单行脚本，表示“查找文件”，该脚本运行`grep`与任何用户提供的选项和搜索字符串，如[示例 9-1](#ex_ff)中所示。
- en: Example 9-1\. The `ff` script
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-1\. `ff`脚本
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make the script executable and place it into any directory in your search path,
    such as your personal *bin* subdirectory:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使脚本可执行，并将其放入搜索路径中的任何目录，例如您的个人*bin*子目录：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run `ff` anytime to locate files quickly when you can’t remember where you put
    them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随时运行`ff`来快速定位文件，当你忘记放置它们的位置时。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Rerun the `find` command every so often to update the index. (Or better yet,
    create a scheduled job with `cron`; see [“Learn cron, crontab, and at”](ch11.xhtml#section_crontab).)
    Voilà—you’ve built a fast, flexible file-search utility out of two small commands.
    Linux systems provide other applications that index and search files quickly,
    such as the `locate` command and the search utilities in GNOME, KDE Plasma, and
    other desktop environments, but that’s beside the point. Look how easy it was
    to build it *yourself*. And the key to success was to create a text file in a
    simple format.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 定期重新运行`find`命令以更新索引。（或者更好的办法是使用`cron`创建定期作业；参见[“学习cron、crontab和at”](ch11.xhtml#section_crontab)。）Voilà——你已经利用两个小命令构建了一个快速灵活的文件搜索实用程序。Linux系统提供了其他快速索引和搜索文件的应用程序，如`locate`命令以及GNOME、KDE
    Plasma和其他桌面环境中的搜索实用程序，但这不是重点。看看你自己创建它*多么容易*。成功的关键是创建一个简单格式的文本文件。
- en: Checking Domain Expiration
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查域名过期
- en: 'For the next example, suppose you own some internet domain names and want to
    keep track of when they expire so you can renew them. That’s step 1, identify
    the business problem. Step 2 is to create a file of those domain names, such as
    *domains.txt*, one domain name per line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个示例，假设你拥有一些互联网域名，并希望跟踪它们的到期时间以便续订。这是第1步，确定业务问题。第2步是创建这些域名的文件，例如*domains.txt*，每行一个域名：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Step 3 is to invent commands that leverage this text file to determine expiration
    dates. Start with the `whois` command, which queries a domain registrar for information
    about a domain:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第3步是发明利用这个文本文件来确定到期日期的命令。从查询域名注册商提供有关域名信息的`whois`命令开始：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The expiration date is preceded by the string “Registry Expiry Date”, which
    you can isolate with `grep` and `awk`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该过期日期之前的字符串“Registry Expiry Date”可通过`grep`和`awk`分离出来：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Make the date more readable via the `date --date` command, which can convert
    a date string from one format to another:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过`date --date`命令使日期更易读，该命令可以将一个日期字符串从一种格式转换为另一种格式：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Use command substitution to feed the date string from `whois` to the `date`
    command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令替换将`whois`的日期字符串提供给`date`命令：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You now have a command that queries a registrar and prints an expiration date.
    Create a script `check-expiry`, shown in [Example 9-2](#ex_check_expiry), that
    runs the preceding command and prints the expiration date, a tab, and the domain
    name:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个命令，查询注册商并打印到期日期。创建一个名为`check-expiry`的脚本，如[示例 9-2](#ex_check_expiry)所示，运行前述命令并打印到期日期、一个制表符和域名：
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Example 9-2\. The `check-expiry` script
  id: totrans-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-2\. `check-expiry`脚本
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, check all domains in the file *domains.txt* using a loop. Create a new
    script, `check-expiry-all`, shown in [Example 9-3](#ex_check_expiry_all).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用循环检查文件*domains.txt*中的所有域。创建一个新脚本`check-expiry-all`，如[示例 9-3](#ex_check_expiry_all)所示。
- en: Example 9-3\. The `check-expiry-all` script
  id: totrans-51
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-3\. `check-expiry-all`脚本
- en: '[PRE18]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the script in the background, since it may take a while if you have many
    domains, and redirect all output (stdout and stderr) to a file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本在后台运行，因为如果你有很多域名的话，可能需要一段时间，并将所有输出（stdout和stderr）重定向到文件：
- en: '[PRE19]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the script finishes, the file *expiry.txt* contains the desired information:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本完成后，文件*expiry.txt*包含所需的信息：
- en: '[PRE20]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Hooray! But don’t stop there. The file *expiry.txt* is itself nicely structured
    for further processing, with two tabbed columns. For example, sort the dates and
    find the next domain to renew:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！但不要停在这里。文件*expiry.txt*本身结构良好，便于进一步处理，有两列标签。例如，对日期进行排序，找到下一个需要续订的域名：
- en: '[PRE21]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Or, use `awk` to find domains that have expired or are expiring today—that
    is, their expiration date (field 1) is less than or equal to today’s date (printed
    with `date +%Y-%m-%d`):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用`awk`查找今天到期或将要到期的域名，即其到期日期（字段1）小于或等于今天的日期（使用`date +%Y-%m-%d`打印）：
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A few notes on the preceding `awk` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前述`awk`命令的几点说明：
- en: I escaped the dollar sign (before `$1`) and the double quotes around the date
    string so the shell doesn’t evaluate them before `awk` can.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`awk`之前，我转义了美元符号（在`$1`前）和日期字符串周围的双引号，这样shell在`awk`执行之前就不会对它们进行评估。
- en: I’ve cheated a bit by using the string operator `<=` to compare dates. It’s
    not a mathematical comparison, just a string comparison, but it works because
    the date format, *`YYYY-MM-DD`*, sorts alphabetically and chronologically in the
    same order.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我稍微作弊了，使用字符串运算符`<=`来比较日期。这不是数学比较，只是字符串比较，但它能够工作，因为日期格式*`YYYY-MM-DD`*按字母顺序和时间顺序排序。
- en: With more effort, you could do date math in `awk` to report expiration dates,
    say, two weeks in advance, then create a scheduled job to run the script nightly
    and email you a report. Feel free to experiment. The point here, however, is that
    once again, with a handful of commands, you’ve built a useful utility that’s driven
    by a text file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更多努力的话，你可以在`awk`中进行日期数学运算，报告到期日期，比如提前两周，然后创建一个定时作业，每晚运行脚本并通过电子邮件发送报告。随时进行实验。然而，这里的重点是，再次用几个命令，你已经构建了一个由文本文件驱动的有用工具。
- en: Building an Area Code Database
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建区号数据库
- en: The next example uses a file with three fields that you can process in many
    ways. The file, named *areacodes.txt*, contains telephone area codes for the United
    States. Retrieve one from this book’s [supplemental material](https://efficientlinux.com/examples)
    in the directory *chapter09/build_area_code_database*, or create your own file,
    say, from [Wikipedia](https://oreil.ly/yz2M1):^([2](ch09.xhtml#idm46586638304304))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例使用一个包含三个字段的文件，你可以用多种方式处理它。文件名为*areacodes.txt*，包含美国的电话区号。从本书的[补充材料](https://efficientlinux.com/examples)中的目录*chapter09/build_area_code_database*获取文件，或者自己创建一个文件，比如从[Wikipedia](https://oreil.ly/yz2M1)获取：^([2](ch09.xhtml#idm46586638304304))
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'Arrange the fields with predictable lengths first, so columns appear neatly
    lined up to the eye. Look how messy the file appears if you put the city names
    in the first column:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 先排列长度可预测的字段，这样列就会整齐地对齐。如果把城市名放在第一列，文件看起来会多么凌乱：
- en: '[PRE24]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once this file is in place, you can do a lot with it. Look up area codes by
    state with `grep`, adding the `-w` option to match full words only (in case other
    text coincidentally contains “NJ”):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个文件就位，你可以做很多事情。使用`grep`按州查找区号，添加`-w`选项以匹配完整的单词（以防其他文本恰好包含“NJ”）：
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'or look up cities by area code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者按区号查找城市：
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'or by any string in the file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过文件中的任何字符串查找：
- en: '[PRE27]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Count the area codes with `wc`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wc`计算区号：
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Find the state with the most area codes (the winner is California with 38):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 找到区号最多的州（冠军是加利福尼亚州，有38个）：
- en: '[PRE29]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Convert the file to CSV format to import into a spreadsheet application. Print
    the third field enclosed in double quotes to prevent its commas from being interpreted
    as CSV separator characters:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件转换为CSV格式，以导入电子表格应用程序。打印第三个字段时用双引号括起来，以防止其逗号被解释为CSV分隔符：
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Collate all area codes for a given state onto a single line:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定州的所有区号汇总到一行上：
- en: '[PRE31]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'or collate for each state, using arrays and `for` loops as in [“Improving the
    duplicate file detector”](ch05.xhtml#sec_awk_arrays):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者为每个州使用数组和`for`循环汇总，如[“提高重复文件检测器”](ch05.xhtml#sec_awk_arrays)中所示：
- en: '[PRE32]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Turn any of the preceding commands into aliases, functions, or scripts, whatever
    is convenient. A simple example is the `areacode` script in [Example 9-4](#ex_areacodes).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将任何前述命令转换为别名、函数或脚本，方便使用。一个简单的例子是[示例 9-4](#ex_areacodes)中的`areacode`脚本。
- en: Example 9-4\. The `areacode` script
  id: totrans-88
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-4\. `areacode` 脚本
- en: '[PRE33]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `areacode` script searches for any whole word in the *areacodes.txt* file,
    such as an area code, state abbreviation, or city name:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`areacode`脚本搜索*areacodes.txt*文件中的任何整词，如区号、州名缩写或城市名：'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Building a Password Manager
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建密码管理器
- en: For a final, in-depth example, let’s store usernames, passwords, and notes in
    an encrypted text file, in a structured format for easy retrieval on the command
    line. The resulting command is a basic password manager, an application that eases
    the burden of memorizing lots of complicated passwords.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后深入的示例，让我们将用户名、密码和备注存储在加密的文本文件中，以结构化格式便于在命令行上进行检索。生成的命令是一个基本的密码管理器，一个简化记忆大量复杂密码负担的应用程序。
- en: Warning
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Password management is a complex topic in computer security. This example creates
    an extremely basic password manager as an educational exercise. Don’t use it for
    mission-critical applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 密码管理在计算机安全中是一个复杂的主题。这个例子创建了一个非常基本的密码管理器作为教育练习。不要将其用于关键任务应用程序。
- en: 'The password file, named *vault*, has three fields separated by single tab
    characters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 密码文件，命名为*vault*，有三个字段，由单个制表符分隔：
- en: Username
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名
- en: Password
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Notes (any text)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意（任何文本）
- en: 'Create the *vault* file and add the data. The file is not encrypted yet, so
    insert only fake passwords for now:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建*vault*文件并添加数据。文件尚未加密，所以现在只插入虚假密码。
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Store the vault in a known location:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将保险库存储在已知位置：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The idea is to use a pattern-matching program like `grep` or `awk` to print
    lines that match a given string. This simple but powerful technique can match
    any part of any line, rather than just usernames or websites. For example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是使用像`grep`或`awk`这样的模式匹配程序打印匹配给定字符串的行。这种简单而强大的技术可以匹配任何行的任何部分，而不仅仅是用户名或网站。例如：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Capture this simple functionality in a script; then, let’s improve it step-by-step,
    including finally encrypting the *vault* file. Call the script `pman` for “password
    manager” and create the trivial version in [Example 9-5](#ex_pman_1).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中捕获这个简单的功能；然后，我们一步步改进它，包括最终对*vault*文件进行加密。将脚本命名为`pman`，表示“密码管理器”，并在[示例 9-5](https://example.org/ex_pman_1)中创建最简单的版本。
- en: 'Example 9-5\. `pman` version 1: as simple as it gets'
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-5\. `pman` 版本 1：尽可能简单
- en: '[PRE38]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Store the script in your search path:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本存储在您的搜索路径中：
- en: '[PRE39]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Try the script:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这个脚本：
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The next version in [Example 9-6](#ex_pman_2) adds a bit of error checking and
    some memorable variable names.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9-6](https://example.org/ex_pman_2)中的下一个版本添加了一些错误检查和一些值得记住的变量名。'
- en: 'Example 9-6\. `pman` version 2: add some error checking'
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-6\. `pman` 版本 2：添加一些错误检查
- en: '[PRE41]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the script:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本：
- en: '[PRE42]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'A shortcoming of this technique is that it won’t scale. If *vault* contained
    hundreds of lines and `grep` matched and printed 63 of them, you’d have to hunt
    by eye to find the password you need. Improve the script by adding a unique key
    (a string) to each line in the third column, and update `pman` to search for that
    unique key first. The *vault* file, with third column bolded, now looks like:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的一个缺点是它无法扩展。如果*vault*包含数百行，而`grep`匹配并打印了其中的63行，你将不得不靠眼睛寻找你需要的密码。通过在第三列中的每行添加一个唯一的键（一个字符串），并更新`pman`来首先搜索该唯一键来改进脚本。现在，*vault*文件，用粗体标记的第三列，看起来像这样：
- en: '[PRE43]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[Example 9-7](#ex_pman_3) shows the updated script that uses `awk` instead
    of `grep`. It also uses command substitution to capture the output and check if
    it’s empty (the test `-z` means “zero length string”). Notice that if you search
    for a key that doesn’t exist in *vault*, `pman` falls back to its original behavior
    and prints all lines that match the search string.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 9-7](https://example.org/ex_pman_3)展示了使用`awk`而不是`grep`的更新脚本。它还使用命令替换来捕获输出并检查是否为空（测试`-z`表示“零长度字符串”）。请注意，如果搜索一个在*vault*中不存在的键，`pman`会回到其原始行为，并打印所有匹配搜索字符串的行。'
- en: 'Example 9-7\. `pman` version 3: prioritize searching for the key in the third
    column'
  id: totrans-121
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-7\. `pman` 版本 3：优先搜索第三列的关键字
- en: '[PRE44]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Run the script:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本：
- en: '[PRE45]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The plain-text file *vault* is a security risk, so encrypt it with the standard
    Linux encryption program GnuPG, which is invoked as `gpg`. If you already have
    GnuPG set up for use, that’s great. Otherwise, set it up with the following command,
    supplying your email address:^([3](ch09.xhtml#idm46586637958336))
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 明文文件*vault*是一个安全风险，所以用标准的Linux加密程序GnuPG对其进行加密，调用`gpg`。如果您已经设置好了GnuPG供使用，那很好。否则，用以下命令设置它，提供您的电子邮件地址：^([3](ch09.xhtml#idm46586637958336))
- en: '[PRE46]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You’re prompted for a passphrase for the key (twice). Provide a strong passphrase.
    When `gpg` completes, you’re ready to encrypt the password file using public key
    encryption, producing the file *vault.gpg*:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在为密钥输入密码时会提示您输入密码（两次）。提供一个强密码。当 `gpg` 完成后，您就可以使用公钥加密来加密密码文件，生成 *vault.gpg* 文件：
- en: '[PRE47]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As a test, decrypt the *vault.gpg* file to stdout:^([4](ch09.xhtml#idm46586637859744))
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为测试，将 *vault.gpg* 文件解密到标准输出：^([4](ch09.xhtml#idm46586637859744))
- en: '[PRE48]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next, update your script to use the encrypted *vault.gpg* file instead of the
    plain-text *vault* file. That means decrypting *vault.gpg* to stdout and piping
    its contents to `awk` for matching, as in [Example 9-8](#ex_pman_4).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新您的脚本以使用加密的 *vault.gpg* 文件而不是明文的 *vault* 文件。这意味着将 *vault.gpg* 解密到标准输出，并将其内容管道传输到
    `awk` 进行匹配，如 [示例 9-8](#ex_pman_4) 中所示。
- en: 'Example 9-8\. `pman` version 4: using an encrypted vault'
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 9-8\. `pman` 版本 4：使用加密保险库
- en: '[PRE49]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The script now displays passwords from the encrypted file:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本现在显示来自加密文件的密码：
- en: '[PRE50]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'All the pieces are in place now for your password manager. Some final steps
    are:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的部件现在都准备就绪，用于您的密码管理器。一些最后的步骤是：
- en: When you’re convinced that you can decrypt the *vault.gpg* file reliably, delete
    the original *vault* file.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您确信可以可靠地解密 *vault.gpg* 文件时，请删除原始的 *vault* 文件。
- en: If you wish, replace the fake passwords with real ones. See [“Editing Encrypted
    Files Directly”](#sidebar_gpg_edit) for advice on editing an encrypted text file.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要的话，用真实的密码替换虚假密码。参见 [“直接编辑加密文件”](#sidebar_gpg_edit) 了解如何编辑加密文本文件的建议。
- en: 'Support comments in the password vault—lines that begin with a pound sign (`#`)—so
    you can make notes about the entries. To do so, update the script to pipe the
    decrypted contents to `grep -v` to filter any lines that begin with a pound sign:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持密码保险库中的注释——以井号 (`#`) 开头的行——以便您可以对条目做出备注。为此，请更新脚本将解密内容传输到 `grep -v` 来过滤任何以井号开头的行：
- en: '[PRE51]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Printing passwords on stdout isn’t great for security. [“Improving the Password
    Manager”](ch10.xhtml#sec_pman2) will update this script to copy and paste passwords
    instead of printing them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将密码打印到标准输出不利于安全性。[“改进密码管理器”](ch10.xhtml#sec_pman2) 将更新脚本，用复制粘贴代替打印密码。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: 'File paths, domain names, area codes, and login credentials are just a few
    examples of data that work well in a structured text file. How about:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 文件路径、域名、区号和登录凭据等数据在结构化文本文件中表现良好。比如：
- en: Your music files? (Use a Linux command like `id3tool` to extract ID3 information
    from your MP3 files and place it into a file.)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的音乐文件？（使用类似 `id3tool` 的 Linux 命令从 MP3 文件中提取 ID3 信息并将其放入文件中。）
- en: The contacts on your mobile device? (Use an app to export the contacts to CSV
    format, upload them to cloud storage, and then download them to your Linux machine
    for processing.)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您手机上的联系人？（使用应用程序将联系人导出为 CSV 格式，将其上传到云存储，然后从 Linux 机器下载以进行处理。）
- en: Your grades in school? (Use `awk` to track your grade point average.)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在学校的成绩？（使用 `awk` 跟踪您的平均绩点。）
- en: A list of movies you’ve seen or books you’ve read, with additional data (ratings,
    authors, actors, etc.)?
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您看过的电影或读过的书籍清单，包括额外的数据（评分、作者、演员等）？
- en: In this manner, you can build an ecosystem of time-saving commands that are
    personally meaningful or productive for work, limited only by your imagination.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您可以构建一个由个人有意义或有助于工作的节省时间命令组成的生态系统，仅受您的想象力限制。
- en: ^([1](ch09.xhtml#idm46586638536576-marker)) This approach is similar to designing
    a database schema to work well with known queries.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch09.xhtml#idm46586638536576-marker)) 这种方法类似于设计一个数据库模式，以适应已知的查询。
- en: ^([2](ch09.xhtml#idm46586638304304-marker)) The [official list of area codes
    in CSV format](https://oreil.ly/SptWL), maintained by the North American Numbering
    Plan Administrator, lacks city names.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch09.xhtml#idm46586638304304-marker)) [CSV 格式中的官方区号列表](https://oreil.ly/SptWL)，由北美编号计划管理员维护，缺少城市名称。
- en: ^([3](ch09.xhtml#idm46586637958336-marker)) This command generates a public/private
    key pair with all default options and an expiration date of “never.” To learn
    more, see `man gpg` to read about `gpg` options, or seek out a GnuPG tutorial
    online.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch09.xhtml#idm46586637958336-marker)) 此命令使用所有默认选项和“永不”过期日期生成公钥/私钥对。要了解更多信息，请查看
    `man gpg` 以了解 `gpg` 选项，或在线查找 GnuPG 教程。
- en: ^([4](ch09.xhtml#idm46586637859744-marker)) If `gpg` proceeds without prompting
    for your passphrase, it has cached (saved) your passphrase temporarily.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch09.xhtml#idm46586637859744-marker)) 如果 `gpg` 在不提示输入密码的情况下继续进行，它已暂时缓存（保存）了您的密码。
