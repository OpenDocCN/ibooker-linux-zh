- en: Chapter 1\. Combining Commands
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。组合命令
- en: 'When you work in Windows, macOS, and most other operating systems, you probably
    spend your time running applications like web browsers, word processors, spreadsheets,
    and games. A typical application is packed with features: everything that the
    designers thought their users would need. So, most applications are self-sufficient.
    They don’t rely on other apps. You might copy and paste between applications from
    time to time, but for the most part, they’re separate.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Windows、macOS 和大多数其他操作系统中工作时，你可能会花费大量时间运行诸如网页浏览器、文字处理器、电子表格和游戏等应用程序。典型的应用程序包含大量功能：设计师认为用户需要的一切。因此，大多数应用程序是自给自足的。它们不依赖于其他应用程序。你可能偶尔在应用程序之间复制粘贴，但基本上它们是独立的。
- en: The Linux command line is different. Instead of big applications with tons of
    features, Linux supplies thousands of small commands with very few features. The
    command `cat`, for example, prints files on the screen and that’s about it. `ls`
    lists the files in a directory, `mv` renames files, and so on. Each command has
    a simple, fairly well-defined purpose.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 命令行与众不同。与具有大量功能的大型应用程序不同，Linux 提供了数千个功能很少的小命令。例如，命令`cat`只是在屏幕上打印文件而已。`ls`列出目录中的文件，`mv`重命名文件，依此类推。每个命令都有一个简单而相当明确的目的。
- en: What if you need to do something more complicated? Don’t worry. Linux makes
    it easy to *combine commands* so their individual features work together to accomplish
    your goal. This way of working yields a very different mindset about computing.
    Instead of asking “Which app should I launch?” to achieve some result, the question
    becomes “Which commands should I combine?”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要做一些更复杂的事情怎么办？别担心。Linux 可以很容易地*组合命令*，使它们各自的功能一起工作，以实现你的目标。这种工作方式会让你对计算机有非常不同的思维方式。不再是问“我应该启动哪个应用程序？”来实现某个结果，而是变成了“我应该组合哪些命令？”
- en: In this chapter, you’ll learn how to arrange and run commands in different combinations
    to do what you need. To keep things simple, I’ll introduce just six Linux commands
    and their most basic uses so you can focus on the more complex and interesting
    part—combining them—without a huge learning curve. It’s a bit like learning to
    cook with six ingredients, or learning carpentry with just a hammer and a saw.
    (I’ll add more commands to your Linux toolbox in [Chapter 5](ch05.xhtml#ch_toolbox).)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学习如何以不同的组合方式安排和运行命令来完成你的需求。为了保持简单，我将介绍只有六个 Linux 命令及其最基本的用法，这样你可以专注于更复杂和有趣的部分——命令的组合，而无需经历陡峭的学习曲线。这有点像只用六种成分学习烹饪，或者只用锤子和锯子学习木工。（在[第五章](ch05.xhtml#ch_toolbox)中，我会向你的
    Linux 工具箱添加更多命令。）
- en: You’ll combine commands using *pipes*, a Linux feature that connects the output
    of one command to the input of another. As I introduce each command (`wc`, `head`,
    `cut`, `grep`, `sort`, and `uniq`), I’ll immediately demonstrate its use with
    pipes. Some examples will be practical for daily Linux use, while others are just
    toy examples to demonstrate an important feature.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用*管道*来组合命令，这是 Linux 的一个功能，将一个命令的输出连接到另一个命令的输入。在我介绍每个命令（`wc`、`head`、`cut`、`grep`、`sort`和`uniq`）时，我将立即演示它们与管道的使用。有些示例对日常
    Linux 使用很实用，而其他示例只是演示一个重要功能的玩具示例。
- en: Input, Output, and Pipes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入、输出和管道
- en: 'Most Linux commands read input from the keyboard, write output to the screen,
    or both. Linux has fancy names for this reading and writing:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 命令从键盘读取输入，将输出写入屏幕，或者两者兼而有之。Linux 为这种读取和写入赋予了很多花哨的名字：
- en: stdin (pronounced “standard input” or “standard in”)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: stdin（读作“标准输入”或“标准输入”）
- en: The stream of input that Linux reads from your keyboard. When you type any command
    at a prompt, you’re supplying data on stdin.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 从你的键盘读取的输入流。当你在提示符下输入任何命令时，你就是在 stdin 上提供数据。
- en: stdout (pronounced “standard output” or “standard out”)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: stdout（读作“标准输出”或“标准输出”）
- en: The stream of output that Linux writes to your display. When you run the `ls`
    command to print filenames, the results appear on stdout.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 写入到你的显示器的输出流。当你运行`ls`命令来打印文件名时，结果就会显示在 stdout 上。
- en: 'Now comes the cool part. You can connect the stdout of one command to the stdin
    of another, so the first command feeds the second. Let’s begin with the familiar
    `ls -l` command to list a large directory, such as */bin*, in long format:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看看有趣的部分。你可以将一个命令的 stdout 连接到另一个命令的 stdin，这样第一个命令就会向第二个命令输入数据。我们从熟悉的`ls -l`命令开始，以长格式列出一个大目录，比如
    */bin*：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This directory contains far more files than your display has lines, so the
    output quickly scrolls off-screen. It’s a shame that `ls` can’t print the information
    one screenful at a time, pausing until you press a key to continue. But wait:
    another Linux command has that feature. The `less` command displays a file one
    screenful at a time:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录包含的文件比你的显示器能显示的行数多得多，因此输出很快就会滚动到屏幕外。`ls` 无法一次打印信息，直到你按下键盘继续。但等等：另一个 Linux
    命令有这个功能。`less` 命令以一页一页地显示文件：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can connect these two commands because `ls` writes to stdout and `less`
    can read from stdin. Use a pipe to send the output of `ls` to the input of `less`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以连接这两个命令，因为 `ls` 输出到 stdout，而 `less` 可以从 stdin 读取。使用管道将 `ls` 的输出发送到 `less`
    的输入：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This combined command displays the directory’s contents one screenful at a time.
    The vertical bar (`|`) between the commands is the Linux pipe symbol.^([1](ch01.xhtml#idm46586656976720))
    It connects the first command’s stdout to the next command’s stdin. Any command
    line containing pipes is called a *pipeline*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组合命令一次显示目录的内容一页一页。命令之间的竖线 (`|`) 是 Linux 的管道符号。^([1](ch01.xhtml#idm46586656976720))
    它连接第一个命令的 stdout 到下一个命令的 stdin。任何包含管道的命令行被称为 *管道*。
- en: Commands generally are not aware that they’re part of a pipeline. `ls` believes
    it’s writing to the display, when in fact its output has been redirected to `less`.
    And `less` believes it’s reading from the keyboard when it’s actually reading
    the output of `ls`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 命令通常不知道它们是管道的一部分。`ls` 认为它在写入显示器，而实际上它的输出已被重定向到 `less`。而 `less` 则认为它从键盘读取输入，而实际上它正在读取
    `ls` 的输出。
- en: Six Commands to Get You Started
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始学习的六个命令
- en: Pipes are an essential part of Linux expertise. Let’s dive into building your
    piping skills with a small set of Linux commands so no matter which ones you encounter
    later, you’re ready to combine them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是 Linux 专家不可或缺的一部分。让我们通过一小组 Linux 命令来提升你的管道技能，这样无论你以后遇到哪些命令，你都能准备好将它们组合起来使用。
- en: 'The six commands—`wc`, `head`, `cut`, `grep`, `sort`, and `uniq`—have numerous
    options and modes of operation that I’ll largely skip for now to focus on pipes.
    To learn more about any command, run the `man` command to display full documentation.
    For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个命令——`wc`、`head`、`cut`、`grep`、`sort` 和 `uniq`——有许多选项和操作模式，我将大部分跳过，专注于管道。要了解任何命令的更多信息，请运行
    `man` 命令以显示完整文档。例如：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To demonstrate our six commands in action, I’ll use a file named *animals.txt*
    that lists some O’Reilly book information, shown in [Example 1-1](#example_animals.txt).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示我们的六个命令的作用，我将使用一个名为 *animals.txt* 的文件，其中列出了一些 O’Reilly 书籍信息，显示在 [示例 1-1](#example_animals.txt)
    中。
- en: Example 1-1\. Inside the file *animals.txt*
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. *animals.txt* 文件内部
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each line contains four facts about an O’Reilly book, separated by a single
    tab character: the animal on the front cover, the book title, the year of publication,
    and the name of the first author.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每行包含有关 O'Reilly 书籍的四个事实，由单个制表符分隔：封面上的动物、书名、出版年份和第一作者的姓名。
- en: 'Command #1: wc'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #1: wc'
- en: 'The `wc` command prints the number of lines, words, and characters in a file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`wc` 命令会打印文件中的行数、单词数和字符数：'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`wc` reports that the file *animals.txt* has 7 lines, 51 words, and 325 characters.
    If you count the characters by eye, including spaces and tabs, you’ll find only
    318 characters, but `wc` also includes the invisible newline character that ends
    each line.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`wc` 报告文件 *animals.txt* 有 7 行，51 个单词和 325 个字符。如果你用眼睛数字符，包括空格和制表符，你会发现只有 318
    个字符，但 `wc` 还包括每行结尾的不可见换行符。'
- en: 'The options `-l`, `-w`, and `-c` instruct `wc` to print only the number of
    lines, words, and characters, respectively:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选项 `-l`、`-w` 和 `-c` 指示 `wc` 只打印行数、单词数和字符数：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Counting is such a useful, general-purpose task that the authors of `wc` designed
    the command to work with pipes. It reads from stdin if you omit the filename,
    and it writes to stdout. Let’s use `ls` to list the contents of the current directory
    and pipe them to `wc` to count lines. This pipeline answers the question, “How
    many files are visible in my current directory?”
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 计数是一项非常有用的通用任务，`wc` 的作者设计了命令以处理管道。如果你省略文件名，它会从 stdin 读取，并将结果输出到 stdout。让我们使用
    `ls` 列出当前目录的内容，并通过管道将其传递给 `wc` 来统计行数。这个管道回答了问题：“我的当前目录中有多少个文件可见？”
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The option `-1`, which tells `ls` to print its results in a single column, is
    not strictly necessary here. To learn why I used it, see the sidebar [“ls Changes
    Its Behavior When Redirected”](#ls_behavior).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 选项 `-1` 告诉 `ls` 将其结果以单列方式打印，在这里并非严格必要。要了解为什么我使用它，请参阅边栏 [“ls 在重定向时的行为更改”](#ls_behavior)。
- en: '`wc` is the first command you’ve seen in this chapter, so you’re a bit limited
    in what you can do with pipes. Just for fun, pipe the output of `wc` to itself,
    demonstrating that the same command can appear more than once in a pipeline. This
    combined command reports that the number of words in the output of `wc` is four:
    three integers and a filename:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`wc` 是本章中你见过的第一个命令，所以你在管道中能做的事情有限。只是为了好玩，将 `wc` 的输出再次通过管道传递给 `wc`，展示同一个命令可以在管道中出现多次。这个组合命令报告说
    `wc` 输出的单词数是四个：三个整数和一个文件名：'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Why stop there? Add a third `wc` to the pipeline and count lines, words, and
    characters in the output “4”:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要停在这里？在管道中添加第三个 `wc`，并计算输出的行数、单词数和字符数，结果是“4”：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output indicates one line (containing the number 4), one word (the number
    4 itself), and two characters. Why two? Because the line “4” ends with an invisible
    newline character.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了一行（包含数字 4）、一个单词（数字 4 本身）和两个字符。为什么是两个？因为字符串 “4” 末尾有一个不可见的换行符。
- en: That’s enough silly pipelines with `wc`. As you gain more commands, the pipelines
    will become more practical.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `wc` 的愚蠢管道已经足够了。随着你掌握更多命令，管道将变得更实用。
- en: 'Command #2: head'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #2: head'
- en: 'The `head` command prints the first lines of a file. Print the first three
    lines of *animals.txt* with `head` using the option `-n`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 命令打印文件的前几行。使用 `-n` 选项，使用 `head` 打印 *animals.txt* 的前三行：'
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you request more lines than the file contains, `head` prints the whole file
    (like `cat` does). If you omit the `-n` option, `head` defaults to 10 lines (`-n10`).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求的行数超过文件包含的行数，`head` 将打印整个文件（就像 `cat` 命令一样）。如果省略 `-n` 选项，`head` 默认为 10 行（`-n10`）。
- en: 'By itself, `head` is handy for peeking at the top of a file when you don’t
    care about the rest of the contents. It’s a speedy and efficient command, even
    for very large files, because it needn’t read the whole file. In addition, `head`
    writes to stdout, making it useful in pipelines. Count the number of words in
    the first three lines of *animals.txt*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 命令在你不关心文件的其余内容时，非常方便，可以快速而高效地查看文件顶部。即使是非常大的文件，也是如此，因为它无需读取整个文件。此外，`head`
    将结果输出到 stdout，使其在管道中非常有用。统计 *animals.txt* 文件前三行的单词数：'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`head` can also read from stdin for more pipeline fun. A common use is to reduce
    the output from another command when you don’t care to see all of it, like a long
    directory listing. For example, list the first five filenames in the */bin* directory:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 还可以从 stdin 读取，用于更多的管道乐趣。一个常见的用法是在你不想看到全部输出时，从另一个命令中减少输出，比如长目录列表。例如，在
    */bin* 目录中列出前五个文件名：'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Command #3: cut'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #3: cut'
- en: 'The `cut` command prints one or more columns from a file. For example, print
    all book titles from *animals.txt*, which appear in the second column:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`cut` 命令从文件中打印一个或多个列。例如，打印 *animals.txt* 中第二列中出现的所有书名：'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`cut` provides two ways to define what a “column” is. The first is to cut by
    field (`-f`), when the input consists of strings (fields) each separated by a
    single tab character. Conveniently, that is exactly the format of the file *animals.txt*.
    The preceding `cut` command prints the second field of each line, thanks to the
    option `-f2`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`cut` 提供两种定义“列”的方式。第一种是按字段（`-f`）分割，当输入由每个由单个制表符分隔的字符串（字段）组成时。方便的是，这正是 *animals.txt*
    文件的格式。前面的 `cut` 命令通过 `-f2` 选项打印每行的第二个字段。'
- en: 'To shorten the output, pipe it to `head` to print only the first three lines:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缩短输出，将其通过管道传递给 `head`，仅打印 *animals.txt* 的前三行：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also cut multiple fields, either by separating their field numbers
    with commas:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过用逗号分隔它们的字段号来剪切多个字段：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'or by numeric range:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 或者按数字范围：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second way to define a “column” for `cut` is by character position, using
    the `-c` option. Print the first three characters from each line of the file,
    which you can specify either with commas (`1,2,3`) or as a range (`1-3`):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种为 `cut` 定义“列”的方式是通过字符位置，使用 `-c` 选项。从文件的每行中打印前三个字符，可以使用逗号（`1,2,3`）或范围（`1-3`）来指定：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that you’ve seen the basic functionality, try something more practical
    with `cut` and pipes. Imagine that the *animals.txt* file is thousands of lines
    long, and you need to extract just the authors’ last names. First, isolate the
    fourth field, author name:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了基本功能，请尝试使用`cut`和管道来进行更实际的操作。想象一下*animals.txt*文件有数千行长，并且您需要提取作者的姓氏。首先，隔离第四个字段，作者名：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then pipe the results to `cut` again, using the option `-d` (meaning “delimiter”)
    to change the separator character to a comma instead of a tab, to isolate the
    authors’ last names:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次将结果管道传输到`cut`，使用选项`-d`（意味着“分隔符”）将分隔字符更改为逗号而不是制表符，以隔离作者的姓氏：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save Time with Command History and Editing
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存时间与命令历史和编辑
- en: Are you retyping a lot of commands? Press the up arrow key instead, repeatedly,
    to scroll through commands you’ve run before. (This shell feature is called *command
    history*.) When you reach the desired command, press Enter to run it immediately,
    or edit it first using the left and right arrow keys to position the cursor and
    the Backspace key to delete. (This feature is *command-line editing*.)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在重复输入许多命令吗？而不是重复输入，使用向上箭头键滚动前面运行过的命令。 （这个shell功能称为*命令历史*。）当您到达所需命令时，按Enter键立即运行它，或者使用左右箭头键定位光标和Backspace键删除以进行编辑。
    （这个功能是*命令行编辑*。）
- en: I’ll discuss much more powerful features for command history and editing in
    [Chapter 3](ch03.xhtml#ch_history).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第3章](ch03.xhtml#ch_history)中讨论更强大的命令历史和编辑功能。
- en: 'Command #4: grep'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #4: grep'
- en: '`grep` is an extremely powerful command, but for now I’ll hide most of its
    capabilities and say it prints lines that match a given string. (More detail will
    come in [Chapter 5](ch05.xhtml#ch_toolbox).) For example, the following command
    displays lines from *animals.txt* that contain the string `Nutshell`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`是一个非常强大的命令，但目前我将隐藏其大部分功能，简单说它打印与给定字符串匹配的行。（更多详细信息请参见[第5章](ch05.xhtml#ch_toolbox)。）例如，以下命令显示*animals.txt*中包含字符串`Nutshell`的行：'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also print lines that *don’t* match a given string, with the `-v` option.
    Notice the lines containing “Nutshell” are absent:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`-v`选项打印不匹配给定字符串的行。请注意不包含“Nutshell”字符串的行：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In general, `grep` is useful for finding text in a collection of files. The
    following command prints lines that contain the string `Perl` in files with names
    ending in *.txt*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，`grep`对于在文件集合中查找文本非常有用。以下命令打印在以*.txt*结尾的文件中包含字符串`Perl`的行：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, `grep` found three matching lines, one in *animals.txt* and two
    in *essay.txt*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`grep`找到三行匹配的内容，一个在*animals.txt*中，两个在*essay.txt*中。
- en: '`grep` reads stdin and writes stdout, making it great for pipelines. Suppose
    you want to know how many subdirectories are in the large directory */usr/lib*.
    There is no single Linux command to provide that answer, so construct a pipeline.
    Begin with the `ls -l` command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`读取标准输入并写入标准输出，非常适合管道。假设您想知道大目录*/usr/lib*中有多少个子目录。没有单个Linux命令可以提供答案，因此构建一个管道。从`ls
    -l`命令开始：'
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Notice that `ls -l` marks directories with a `d` at the beginning of the line.
    Use `cut` to isolate the first column, which may or may not be a `d`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`ls -l`在行首用`d`标记目录。使用`cut`来隔离第一列，可能是`d`也可能不是：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then use `grep` to keep only the lines containing `d`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`grep`仅保留包含`d`的行：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, count lines with `wc`, and you have your answer, produced by a four-command
    pipeline—*/usr/lib* contains 145 subdirectories:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用`wc`计算行数，您就得到了答案，由一个四条命令的管道产生——*/usr/lib*包含145个子目录：
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Command #5: sort'
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #5: sort'
- en: 'The `sort` command reorders the lines of a file into ascending order (the default):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`命令将文件行按升序（默认）重新排序：'
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'or descending order (with the `-r` option):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 或按降序排列（使用`-r`选项）：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`sort` can order the lines alphabetically (the default) or numerically (with
    the `-n` option). I’ll demonstrate this with pipelines that cut the third field
    in *animals.txt*, the year of publication:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`可以按字母顺序（默认）或数字顺序（使用`-n`选项）对行进行排序。我将演示使用管道切割*animals.txt*中第三个字段，即出版年份：'
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To learn the year of the most recent book in *animals.txt*, pipe the output
    of `sort` to the input of `head` and print just the first line:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解*animals.txt*中最新一本书的年份，请将`sort`的输出通过管道传输到`head`的输入，并仅打印第一行：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Maximum and Minimum Values
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大值和最小值
- en: '`sort` and `head` are powerful partners when working with numeric data, one
    value per line. You can print the maximum value by piping the data to:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort`和`head`在处理数值数据时是强大的搭档，每行一个值。您可以通过管道数据到以下命令来打印最大值：'
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'and print the minimum value with:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 并打印出最小值：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As another example, let’s play with the file */etc/passwd*, which lists the
    users that can run processes on the system.^([4](ch01.xhtml#idm46586656804048))
    You’ll generate a list of all users in alphabetical order. Peeking at the first
    five lines, you see something like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，让我们玩玩文件 */etc/passwd*，其中列出了可以在系统上运行进程的用户。^([4](ch01.xhtml#idm46586656804048))
    你将生成一个按字母顺序排列的所有用户列表。浏览前五行，你会看到像这样的内容：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Each line consists of strings separated by colons, and the first string is
    the username, so you can isolate the usernames with the `cut` command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每行由冒号分隔的字符串组成，第一个字符串是用户名，所以你可以用 `cut` 命令来隔离用户名：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'and sort them:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 并对它们进行排序：
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To produce the sorted list of all usernames, not just the first five, replace
    `head` with `cat`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成所有用户名按字母顺序排序的列表，而不只是前五个，请用 `head` 替换成 `cat`：
- en: '[PRE36]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To detect if a given user has an account on your system, match their username
    with `grep`. Empty output means no account:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测给定用户在您的系统上是否有账户，可以将他们的用户名与 `grep` 命令匹配。空输出意味着没有账户：
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `-w` option instructs `grep` to match full words only, not partial words,
    in case your system also has a username that contains “jones”, such as `sallyjones2`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`-w` 选项告诉 `grep` 只匹配完整的单词，而不是部分单词，以防您的系统也有包含“jones”的用户名，比如 `sallyjones2`。'
- en: 'Command #6: uniq'
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '命令 #6：uniq'
- en: 'The `uniq` command detects repeated, adjacent lines in a file. By default,
    it removes the repeats. I’ll demonstrate this with a simple file containing capital
    letters:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`uniq` 命令用于检测文件中重复的相邻行。默认情况下，它会删除重复行。我将用一个包含大写字母的简单文件来演示这一点：'
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Notice that `uniq` reduced the first three `A` lines to a single `A`, but it
    left the last `A` in place because it wasn’t *adjacent* to the first three.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`uniq` 将前三行的 `A` 缩减为单个 `A`，但保留最后一个 `A`，因为它与前三个不是*相邻*的。
- en: 'You can also count occurrences with the `-c` option:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `-c` 选项来计算出现次数：
- en: '[PRE39]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'I’ll admit, when I first encountered the `uniq` command, I didn’t see much
    use in it, but it quickly became one of my favorites. Suppose you have a tab-separated
    file of students’ final grades for a university course, ranging from `A` (best)
    to `F` (worst):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认，当我第一次接触到 `uniq` 命令时，并没有看到它的多大用处，但它很快成为我最喜欢的命令之一。假设你有一个以制表符分隔的学生最终成绩文件，从
    `A`（最好）到 `F`（最差）：
- en: '[PRE40]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You’d like to print the grade with the most occurrences. (If there’s a tie,
    print just one of the winners.) Begin by isolating the grades with `cut` and sorting
    them:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望打印出现次数最多的等级。（如果有并列的情况，只打印其中一个获胜者。）从 `cut` 命令开始隔离等级并进行排序：
- en: '[PRE41]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, use `uniq` to count adjacent lines:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `uniq` 命令来计算相邻行：
- en: '[PRE42]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then sort the lines in reverse order, numerically, to move the most frequently
    occurring grade to the top line:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后以逆序的数值方式对行进行排序，将最频繁出现的等级移动到顶部行：
- en: '[PRE43]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'and keep just the first line with `head`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 并只保留第一行，使用 `head` 命令：
- en: '[PRE44]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, since you want just the letter grade, not the count, isolate the grade
    with `cut`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为你只想要字母等级，而不是数量，所以用 `cut` 命令来隔离等级：
- en: '[PRE45]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: and there’s your answer, thanks to a six-command pipeline—our longest yet. This
    sort of step-by-step pipeline construction is not just an educational exercise.
    It’s how Linux experts actually work. [Chapter 8](ch08.xhtml#ch_one_liner) is
    devoted to this technique.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，你的答案就出来了，多亏了一个六步骤的管道—我们迄今为止最长的管道。这种一步一步的管道构建不仅是一个教育性的练习。这是 Linux 专家实际工作的方式。[第
    8 章](ch08.xhtml#ch_one_liner) 就专门讨论了这种技术。
- en: Detecting Duplicate Files
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测重复文件
- en: 'Let’s combine what you’ve learned with a larger example. Suppose you’re in
    a directory full of JPEG files and you want to know if any are duplicates:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们结合你所学到的内容，看一个更大的例子。假设你在一个充满 JPEG 文件的目录中，想知道是否有重复的文件：
- en: '[PRE46]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can answer this question with a pipeline. You’ll need another command,
    `md5sum`, which examines a file’s contents and computes a 32-character string
    called a *checksum*:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用一个管道来回答这个问题。你需要另一个命令 `md5sum`，它检查文件的内容并计算一个称为*校验和*的 32 个字符的字符串：
- en: '[PRE47]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'A given file’s checksum, for mathematical reasons, is very, very likely to
    be unique. If two files have the same checksum, therefore, they are almost certainly
    duplicates. Here, `md5sum` indicates the first and third files are duplicates:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数学原因，给定文件的校验和很可能是唯一的。如果两个文件具有相同的校验和，那么它们几乎肯定是重复的。在这里，`md5sum` 表示第一个和第三个文件是重复的：
- en: '[PRE48]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Duplicate checksums are easy to detect by eye when there are only three files,
    but what if you have three thousand? It’s pipes to the rescue. Compute all the
    checksums, use `cut` to isolate the first 32 characters of each line, and sort
    the lines to make any duplicates adjacent:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有三个文件时，重复的校验和很容易用肉眼检测，但是如果有三千个文件呢？管道来拯救。计算所有的校验和，使用`cut`来分离每行的前32个字符，并对行进行排序以使任何重复项相邻：
- en: '[PRE49]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now add `uniq` to count repeated lines:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加`uniq`来计算重复的行数：
- en: '[PRE50]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If there are no duplicates, all of the counts produced by `uniq` will be 1\.
    Sort the results numerically from high to low, and any counts greater than 1 will
    appear at the top of the output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有重复项，`uniq`生成的所有计数都将为1。将结果按数字从高到低排序，任何计数大于1的都将出现在输出的顶部：
- en: '[PRE51]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now let’s remove the nonduplicates. Their checksums are preceded by six spaces,
    the number one, and a single space. We’ll use `grep -v` to remove these lines:^([5](ch01.xhtml#idm46586652426688))
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们移除非重复项。它们的校验和前面有六个空格，数字1和一个空格。我们将使用`grep -v`来移除这些行：^([5](ch01.xhtml#idm46586652426688))
- en: '[PRE52]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Finally, you have your list of duplicate checksums, sorted by the number of
    occurrences, produced by a beautiful six-command pipeline. If it produces no output,
    there are no duplicate files.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你有一个按出现次数排序的重复校验和列表，由一个美丽的六命令管道产生。如果没有输出，那么就没有重复文件。
- en: 'This command would be even more useful if it displayed the filenames of the
    duplicates, but that operation requires features we haven’t discussed yet. (You’ll
    learn them in [“Improving the duplicate file detector”](ch05.xhtml#sec_awk_arrays).)
    For now, identify the files having a given checksum by searching with `grep`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该命令能显示重复文件的文件名，那么它将更加有用，但这需要我们尚未讨论的功能。 （你将在[“改进重复文件检测器”](ch05.xhtml#sec_awk_arrays)中了解它们。）现在，通过使用`grep`来搜索具有给定校验和的文件来识别文件：
- en: '[PRE53]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'and cleaning up the output with `cut`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用`cut`来清理输出：
- en: '[PRE54]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You’ve now seen the power of stdin, stdout, and pipes. They turn a small handful
    of commands into a collection of composable tools, proving that the whole is greater
    than the sum of the parts. *Any* command that reads stdin or writes stdout can
    participate in pipelines.^([6](ch01.xhtml#idm46586652416784)) As you learn more
    commands, you can apply the general concepts from this chapter to forge your own
    powerful combinations.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了标准输入stdin、标准输出stdout和管道的强大之处。它们将少量命令转变为可组合的工具集合，证明整体大于各个部分之和。*任何*能够读取标准输入或写入标准输出的命令都可以参与管道操作。^([6](ch01.xhtml#idm46586652416784))
    随着你学习更多命令，你可以将本章的一般概念应用到自己的强大组合中。
- en: ^([1](ch01.xhtml#idm46586656976720-marker)) On US keyboards, the pipe symbol
    is on the same key as the backslash (`\`), usually located between the Enter and
    Backspace keys or between the left Shift key and Z.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm46586656976720-marker)) 在美国键盘上，管道符号位于与反斜杠（`\`）相同的键上，通常位于回车和退格键之间或左Shift键和Z键之间。
- en: ^([2](ch01.xhtml#idm46586652535568-marker)) The POSIX standard calls this form
    of command a *utility*.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm46586652535568-marker)) POSIX 标准将这种形式的命令称为*实用程序*。
- en: ^([3](ch01.xhtml#idm46586655504608-marker)) Depending on your setup, `ls` may
    also use other formatting features, such as color, when printing to the screen
    but not when redirected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.xhtml#idm46586655504608-marker)) 根据你的设置，`ls`可能还会在打印到屏幕时使用其他格式功能，例如颜色，但在重定向时不会使用。
- en: ^([4](ch01.xhtml#idm46586656804048-marker)) Some Linux systems store the user
    information elsewhere.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.xhtml#idm46586656804048-marker)) 一些Linux系统将用户信息存储在其他地方。
- en: ^([5](ch01.xhtml#idm46586652426688-marker)) Technically, you don’t need the
    final `sort -nr` in this pipeline to isolate duplicates because `grep` removes
    all the nonduplicates.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.xhtml#idm46586652426688-marker)) 在技术上，你不需要在这个管道中的最后加上`sort -nr`来隔离重复项，因为`grep`会移除所有非重复项。
- en: ^([6](ch01.xhtml#idm46586652416784-marker)) Some commands do not use stdin/stdout
    and therefore cannot read from pipes or write to pipes. Examples are `mv` and
    `rm`. Pipelines may incorporate these commands in other ways, however; you’ll
    see examples in [Chapter 8](ch08.xhtml#ch_one_liner).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.xhtml#idm46586652416784-marker)) 一些命令不使用标准输入/输出，因此无法从管道读取或向管道写入。例如`mv`和`rm`。然而，管道可以以其他方式整合这些命令；你将在[第8章](ch08.xhtml#ch_one_liner)中看到例子。
