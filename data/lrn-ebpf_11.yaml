- en: Chapter 11\. The Future Evolution of eBPF
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章：eBPF 的未来演进
- en: eBPF is not finished yet! Like most software, it’s under continual development
    within the Linux kernel, and it’s being added to the Windows operating system
    as well. In this chapter we’ll look at some of the likely future paths for this
    technology.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF 还没有完全成熟！与大多数软件一样，它在 Linux 内核中不断发展，并且正在被添加到 Windows 操作系统中。在这一章中，我们将探讨该技术未来可能的发展路径。
- en: Since it was introduced within the Linux kernel, BPF has evolved into its own
    subsystem with its own mailing list and maintainers.^([1](ch11.html#ch11fn1))
    As eBPF’s popularity increased and interest broadened beyond the Linux kernel
    community, it made sense to create a neutral body that could coordinate among
    the different parties involved. That body is the eBPF Foundation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从在 Linux 内核中引入以来，BPF 已经发展成为具有自己的子系统、邮件列表和维护者。^([1](ch11.html#ch11fn1)) 随着 eBPF
    的流行和兴趣超出 Linux 内核社区，创建一个中立机构来协调各方之间的合作是很有意义的。这个机构就是 eBPF 基金会。
- en: The eBPF Foundation
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: eBPF 基金会
- en: The [eBPF Foundation](https://ebpf.io/foundation) was set up in 2021 by Google,
    Isovalent, Meta (then known as Facebook), Microsoft, and Netflix, under the auspices
    of the Linux Foundation. The foundation acts as a neutral body that can hold funds
    and intellectual property, such that various commercial companies can collaborate
    with one another.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[eBPF 基金会](https://ebpf.io/foundation) 由 Google、Isovalent、Meta（当时称为 Facebook）、Microsoft
    和 Netflix 在 Linux 基金会的支持下于 2021 年成立。该基金会作为一个中立机构，可以持有资金和知识产权，各商业公司可以在此基础上进行合作。'
- en: The intent was not to change anything about the way eBPF technology is developed
    by the Linux kernel community and contributors to the Linux BPF subsystem. The
    foundation’s activities are directed by the BPF Steering Committee, which is entirely
    composed of the technical experts who build the technology, including the Linux
    kernel BPF maintainers and representatives from other core eBPF projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着要改变 Linux 内核社区和 Linux BPF 子系统的开发方式。基金会的活动由 BPF 领导委员会指导，该委员会完全由技术专家组成，包括
    Linux 内核 BPF 维护者和其他核心 eBPF 项目的代表。
- en: The eBPF Foundation focuses on eBPF as a technology platform and the ecosystem
    of tools that enable eBPF development. Projects that build on top of eBPF looking
    for neutral ownership may find a better home in other foundations. For example,
    Cilium, Pixie, and Falco are all part of the CNCF, which makes sense as they are
    all intended to be used in cloud native environments.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF 基金会专注于 eBPF 作为技术平台及其生态系统中支持 eBPF 开发的工具。构建在 eBPF 之上的项目若寻求中立的管理，可能会在其他基金会中找到更合适的归属。例如，Cilium、Pixie
    和 Falco 都是 CNCF 的一部分，这是有道理的，因为它们都旨在用于云原生环境。
- en: One of the key drivers of this collaboration beyond the existing Linux maintainers
    was the interest that Microsoft had in developing eBPF within the Windows operating
    system. This brings about a need to define a standard for eBPF,^([2](ch11.html#ch11fn2))
    such that programs written for one OS can be used on another. This work is being
    done under the auspices of the eBPF Foundation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在现有的 Linux 维护者之外，推动此次合作的关键驱动力是微软对在 Windows 操作系统中发展 eBPF 的兴趣。这带来了制定 eBPF 标准的需求，以便可以在不同操作系统上使用相同的程序。这项工作在
    eBPF 基金会的支持下进行。
- en: eBPF for Windows
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 上的 eBPF
- en: Work is well underway at Microsoft to support [eBPF for Windows](https://oreil.ly/ArwkR).
    As I write this in the closing months of 2022, there are already [functional demos](https://oreil.ly/H-0dv)
    that show Cilium Layer 4 load balancing and eBPF-based connection tracking running
    on Windows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微软正在积极支持 [Windows 上的 eBPF](https://oreil.ly/ArwkR)。在我写下这些文字的 2022 年末，已经有 [功能演示](https://oreil.ly/H-0dv)
    显示 Cilium 第四层负载均衡和基于 eBPF 的连接跟踪在 Windows 上的运行。
- en: I’ve said before that eBPF programming is kernel programming, and at first glance
    it might seem unintuitive that a program written to run in the Linux kernel and
    that has access to Linux kernel data structures would in any way be able to operate
    in an entirely different operating system. But in practice, particularly when
    it comes to networking, all operating systems will have quite a lot in common.
    A network packet has the same structure whether it was created on a Windows or
    Linux machine, and the layers of the network stack have to be handled the same
    way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前说过，eBPF 编程就是内核编程，乍一看，似乎不太可能写一个程序在 Linux 内核中运行，并且访问 Linux 内核数据结构，然后它能在完全不同的操作系统中运行。但实际上，特别是在网络方面，所有操作系统都有很多共同之处。无论是在
    Windows 还是 Linux 机器上创建的网络数据包，其结构都是相同的，网络堆栈的处理方式也是一样的。
- en: You’ll also recall that eBPF programs consist of a set of bytecode instructions
    that are processed by a virtual machine (VM) implemented within the kernel. That
    VM can be implemented within Windows too!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得 eBPF 程序由一组字节码指令组成，由内核中实现的虚拟机（VM）处理。在 Windows 中也可以实现这个 VM！
- en: '[Figure 11-1](#architectural_overview_of_ebpf_for_wind) shows the eBPF for
    Windows architectural overview, taken from [the project’s GitHub repo](https://oreil.ly/Ii4j2).
    As you can see from this diagram, eBPF for Windows reuses some open source components
    from the existing eBPF ecosystem, such as *libbpf*, and the support in Clang for
    producing eBPF bytecode. The Linux kernel is licensed under GPL, and Windows is
    proprietary, so the Windows project can’t reuse any parts of the Linux kernel’s
    implementation of the verifier.^([3](ch11.html#ch11fn3)) Instead, it uses the
    [PREVAIL verifier](https://vbpf.github.io) and the [uBPF JIT compiler](https://oreil.ly/btrkJ)
    (both of which are permissively licensed so that they can be used by a broader
    range of projects and organizations).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 11-1](#architectural_overview_of_ebpf_for_wind) 展示了 eBPF for Windows 的架构概述，来源于
    [项目的 GitHub 仓库](https://oreil.ly/Ii4j2)。从这张图中可以看出，eBPF for Windows 重用了现有 eBPF
    生态系统中的一些开源组件，比如 *libbpf*，以及 Clang 支持生成 eBPF 字节码。Linux 内核采用 GPL 许可，而 Windows 是专有的，因此
    Windows 项目无法重用 Linux 内核的验证器实现。^([3](ch11.html#ch11fn3)) 反而，它使用了 [PREVAIL 验证器](https://vbpf.github.io)
    和 [uBPF JIT 编译器](https://oreil.ly/btrkJ)（两者都采用宽松许可，以便更广泛地被项目和组织使用）。'
- en: '![Architectural overview of eBPF for Windows, taken from https://oreil.ly/HxKsu](assets/lebp_1101.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![eBPF for Windows 的架构概述，来源于 https://oreil.ly/HxKsu](assets/lebp_1101.png)'
- en: Figure 11-1\. Architectural overview of eBPF for Windows, adapted from [*https://oreil.ly/HxKsu*](https://oreil.ly/HxKsu)
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1\. eBPF for Windows 的架构概述，改编自 [*https://oreil.ly/HxKsu*](https://oreil.ly/HxKsu)
- en: One interesting difference is that eBPF code is verified and JIT-compiled in
    a Windows Secure environment in user space rather than within the kernel (the
    uBPF interpreter shown in the kernel in [Figure 11-1](#architectural_overview_of_ebpf_for_wind)
    is used only in debug builds and not production environments).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的区别是，在 Windows 安全环境中，eBPF 代码是在用户空间进行验证和 JIT 编译的，而不是在内核中（在 [图 11-1](#architectural_overview_of_ebpf_for_wind)
    中显示的 uBPF 解释器仅用于调试构建，而非生产环境）。
- en: 'It would be unrealistic to expect that every single eBPF program written to
    run on Linux will work on Windows. But this isn’t so different from the challenge
    of getting eBPF programs to run on different Linux kernel versions: even with
    CO-RE support, internal kernel data structures can be changed as well as added
    or removed between versions. It is the eBPF programmer’s job to handle these possibilities
    gracefully.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 期望每一个在 Linux 上运行的 eBPF 程序都能在 Windows 上工作是不现实的。但这与使 eBPF 程序在不同 Linux 内核版本上运行的挑战并没有太大不同：即使有了
    CO-RE 支持，内部内核数据结构在版本之间也可能会被更改、添加或删除。处理这些可能性，是 eBPF 程序员的工作。
- en: Speaking of changes to the Linux kernel, what changes can we expect to see in
    eBPF in the coming years?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到 Linux 内核的变更，我们可以期待 eBPF 在未来几年的哪些变化？
- en: Linux eBPF Evolution
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux eBPF 演进
- en: The capabilities of eBPF have evolved with practically every kernel release
    since 3.15\. If you want to know what features are available in any given version,
    the BCC project maintains a [useful list](https://oreil.ly/4H5hU). And I certainly
    expect more additions over the coming years.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自 3.15 版以来，eBPF 的能力随着每个内核发布而演进。如果你想了解每个版本提供了哪些功能，请查看 BCC 项目维护的 [有用列表](https://oreil.ly/4H5hU)。我确实期待未来会有更多的新增功能。
- en: The best way to predict what’s coming is simply to listen to the people who
    are working on it. For example, at the 2022 Linux Plumbers Conference, eBPF maintainer
    Alexei Starovoitov gave a talk discussing how he expects to see the C language
    used by eBPF programs to evolve.^([4](ch11.html#ch11fn4)) We’ve already seen eBPF
    evolve from supporting a few thousand instructions to practically unlimited complexity,
    with the addition of support for loops and an ever-increasing set of BPF helper
    functions. As additional capabilities are added into the C that’s supported, and
    with the support of the verifier, eBPF C could evolve to allow all the flexibility
    of developing kernel modules, but with the safety and dynamic loading characteristics
    of eBPF.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要预测未来的最佳方法就是简单地听取那些正在从事相关工作的人的意见。例如，在2022年Linux管道会议上，eBPF维护者Alexei Starovoitov发表了一篇演讲，讨论了他对eBPF程序中使用的C语言未来演变的期望。^([4](ch11.html#ch11fn4))
    我们已经看到eBPF从支持几千条指令逐步演变为支持几乎无限复杂性，添加了对循环的支持和日益增加的BPF助手函数集。随着支持的C语言增加了额外的功能，以及验证器的支持，eBPF
    C语言可能会演变成允许像开发内核模块一样灵活，但具备eBPF的安全性和动态加载特性。
- en: 'Some of the other ideas being discussed and developed for new eBPF features
    and capabilities include:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正在讨论和开发的其他一些新eBPF特性和功能包括：
- en: Signed eBPF programs
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 签名的eBPF程序
- en: Software supply chain security has been a hot topic for the past few years,
    and a key element is the ability to check that a program you’re thinking of running
    comes from the expected source and has not been tampered with. One way to achieve
    this is, in general, to validate a cryptographic signature that accompanies a
    program. You might think this is something the kernel could do for eBPF programs,
    perhaps as part of the verification step, but unfortunately this is not straightforward!
    As you’ve seen in this book, user space loaders dynamically adjust programs with
    information about where maps are located, and for CO-RE purposes, which from a
    signing perspective is hard to distinguish from malicious modifications. This
    is a problem for which the eBPF community is [keen to find a solution](https://oreil.ly/ns03-).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 软件供应链安全是过去几年的热门话题，关键元素之一是能够检查您考虑运行的程序来自预期来源并且未被篡改。一种通用的方法是验证程序伴随的加密签名。你可能认为这是内核可以为eBPF程序做的事情之一，也许作为验证步骤的一部分，但不幸的是这并不简单！正如您在本书中看到的，用户空间加载器会动态调整程序，并提供有关地图位置以及从签名角度来看难以区分的恶意修改，这是一个问题，eBPF社区正[急于找到解决方案](https://oreil.ly/ns03-)。
- en: Long-lived kernel pointers
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 长期存活的内核指针
- en: An eBPF program can retrieve a pointer to a kernel object using a helper function
    or a kfunc, but a pointer is valid only during that execution of the program.
    The pointer cannot be stored in a map for later retrieval. The idea of [typed
    pointer support](https://oreil.ly/fWVdo) will allow for more flexibility in this
    area.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个eBPF程序可以使用助手函数或kfunc检索指向内核对象的指针，但指针仅在程序的执行期间有效。不能将指针存储在地图中以供以后检索。支持[类型化指针](https://oreil.ly/fWVdo)的想法将在这一领域提供更多的灵活性。
- en: Memory allocation
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分配
- en: It’s not safe for eBPF programs to simply call memory allocation functions like
    `kmalloc()`, but there is [a proposal that suggests](https://oreil.ly/Yxxc5) an
    eBPF-specific alternative.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于eBPF程序来说，简单调用像`kmalloc()`这样的内存分配函数是不安全的，但有[一个建议提议](https://oreil.ly/Yxxc5)了eBPF特定的替代方案。
- en: When will you be able to take advantage of new eBPF features as they emerge?
    As an end user, the features you’re able to take advantage of depend on the version
    of the kernel you’re running in production, and as I discussed in [Chapter 1](ch01.html#what_is_ebpf_and_why_is_it_importantque),
    it can take several years for kernel releases to make it to stable distributions
    of Linux. As an individual you might opt for a bleeding-edge kernel, but the vast
    majority of organizations running server deployments use a stable, supported version.
    eBPF programmers have to take into account that if they write code that takes
    advantage of the newest features added to the kernel, the features are unlikely
    to be usable in most production environments for some years to come. Some organizations
    will have sufficiently urgent needs that it’s worth rolling out newer kernel versions
    more quickly in order to early-adopt new eBPF features.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的 eBPF 功能出现时，您将能够利用它们吗？作为最终用户，您能够利用的功能取决于您在生产中运行的内核版本，在[第 1 章](ch01.html#what_is_ebpf_and_why_is_it_importantque)中我讨论过，Linux
    内核发布稳定版本可能需要数年时间才能到达。作为个人，您可能会选择一个最新的内核，但是大多数运行服务器部署的组织使用的是稳定且受支持的版本。eBPF 程序员必须考虑到，如果他们编写的代码利用了内核中添加的最新功能，这些功能在大多数生产环境中可能几年内还不能使用。一些组织可能会有足够紧急的需求，值得更快地推出新的内核版本，以便早日采用新的
    eBPF 功能。
- en: For example, in another forward-looking talk on [building tomorrow’s networking](https://oreil.ly/IvPgd),
    Daniel Borkmann discussed a feature called *Big TCP*. This was added to Linux
    in version 5.19 to enable network speeds of 100 GBit/s (and faster) by batching
    up network packets to be processed in the kernel. Most Linux distributions won’t
    support a kernel this recent for a few years, but for specialist organizations
    dealing with large amounts of network traffic, it might well be worth upgrading
    sooner. Adding Big TCP support into eBPF and Cilium today means it’s available
    for those massive-scale users, even if it’s not something that can be enabled
    by most of us for a while.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在另一个展望未来的讲话中，Daniel Borkmann 讨论了一个名为 *Big TCP* 的功能，该功能在 Linux 5.19 版本中添加，通过批处理网络数据包以在内核中处理，实现了
    100 GBit/s（甚至更快）的网络速度。大多数 Linux 发行版几年内不会支持这么新的内核，但对于处理大量网络流量的专业组织来说，可能更快升级是值得的。现在将
    Big TCP 支持加入 eBPF 和 Cilium，这意味着对于那些大规模用户而言，即使大多数人暂时无法启用它，它也是可用的。
- en: Since eBPF allows kernel code to be adjusted dynamically, it’s reasonable to
    expect it to be used to address problems “in the field.” In [Chapter 9](ch09.html#ebpf_for_security)
    you read about using eBPF to mitigate kernel vulnerabilities; work is also underway
    to use eBPF to help support hardware devices such as [human interface devices](https://oreil.ly/JVYcY)
    like mice, keyboards, and game controllers. This builds on existing support for
    decoding the protocols used by infrared controllers that I mentioned in [Chapter 7](ch07.html#ebpf_program_and_attachment_types).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 eBPF 允许动态调整内核代码，因此合理地预期它将用于解决“现场”问题。在[第 9 章](ch09.html#ebpf_for_security)中，您可以了解到使用
    eBPF 缓解内核漏洞的情况；还在进行使用 eBPF 支持硬件设备，例如[人机界面设备](https://oreil.ly/JVYcY)，如鼠标、键盘和游戏控制器。这是基于我在[第
    7 章](ch07.html#ebpf_program_and_attachment_types)中提到的支持解码红外控制器使用的协议的现有支持。
- en: eBPF Is a Platform, Not a Feature
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: eBPF 是一个平台，而不是一个功能。
- en: Coming up to a decade ago, the hot new technology was containers, and it seemed
    as though everyone was talking about what they were and what advantages they would
    bring. We’re at a similar stage with eBPF today, with lots of conference talks
    and blog posts—several of which I’ve referred to in this book—extolling the benefits
    of eBPF. Today, containers are part of daily life for many developers, whether
    they’re running code locally using Docker or other container runtimes, or deploying
    code to Kubernetes environments. Will eBPF become part of everyone’s regular toolkit
    too?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将近十年前，热门的新技术是容器，似乎每个人都在谈论它们及其带来的优势。今天，我们在 eBPF 领域也处于类似的阶段，有许多会议演讲和博客文章——其中本书中引用了几篇——赞扬
    eBPF 的好处。今天，对于许多开发人员来说，容器已经成为日常生活的一部分，无论是使用 Docker 或其他容器运行时在本地运行代码，还是将代码部署到 Kubernetes
    环境中。eBPF 是否也会成为每个人的常规工具包呢？
- en: The answer, I believe, is no—or at least, not directly. Most users won’t write
    eBPF programs directly or manipulate them manually with utilities like `bpftool`.
    But they’ll interact regularly with tools built using eBPF, whether that’s for
    performance measurement, debugging, networking, security, tracing, or a whole
    host of other capabilities yet to be implemented using eBPF. Users might not be
    aware that they’re using eBPF, much as they might not know that when they use
    containers, they’re using kernel features like namespaces and cgroups.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信答案是否定的，或者至少不是直接的。大多数用户不会直接编写eBPF程序，也不会使用类似`bpftool`的实用程序手动操作它们。但他们会定期与使用eBPF构建的工具进行交互，无论是性能测量、调试、网络、安全、跟踪，还是其他许多尚未使用eBPF实现的功能。用户可能并不知道他们在使用eBPF，就像他们可能不知道使用容器时使用了像命名空间和控制组这样的内核特性一样。
- en: Today, projects and vendors with knowledge of eBPF highlight their use of it
    because it’s so powerful and implies many advantages. As eBPF-based projects and
    products gain traction and market share, eBPF is becoming the de facto default
    technology platform for infrastructure tooling.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，具备eBPF知识的项目和供应商因其强大性能和许多优势而突显其使用。随着基于eBPF的项目和产品在市场上占据越来越大的份额，eBPF正在成为基础设施工具的事实标准技术平台。
- en: Knowledge of eBPF programming is—and will continue to be—a sought-after but
    relatively rare skill, just as kernel development today is much less common than
    developing, say, business applications or games. If you enjoy diving into the
    lower levels of systems and want to build essential infrastructure tooling, eBPF
    skills will serve you well. I hope this book has been of some assistance on your
    eBPF journey!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF编程的知识是一种仍然很抢手但相对稀有的技能，就像今天内核开发比起开发业务应用或游戏来说要少得多一样。如果你喜欢深入系统的底层并且想要构建基础设施工具，eBPF技能将对你大有裨益。我希望本书对你的eBPF之旅有所帮助！
- en: Conclusion
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations on reaching the end of this book!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你完成了本书的阅读！
- en: I hope that reading *Learning eBPF* has given you insight into the power of
    eBPF. Perhaps it has inspired you to write eBPF code yourself or experiment with
    some of the tools I’ve discussed. If you’ve decided to do some eBPF programming,
    I hope the book has given you some confidence about how to get started. And if
    you have been completing the exercises as you worked through the book, bravo!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望通过阅读《学习eBPF》使你深入了解eBPF的强大之处。也许它已经激发了你自己编写eBPF代码或尝试我讨论过的一些工具的兴趣。如果你已经决定进行一些eBPF编程，希望本书能给你一些开始的信心。如果你在阅读本书时完成了练习，那就太棒了！
- en: If you’re excited about eBPF there are plenty of ways to get involved in the
    community. The best starting point is the website [ebpf.io](http://ebpf.io). This
    will point you to the latest news, projects, events, and happenings, and also
    to the [eBPF Slack](http://ebpf.io/slack) channel where you’re likely to find
    someone with the expertise to answer any questions you might have.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对eBPF感到兴奋，有很多参与社区的方式。最好的起点是访问网站[ebpf.io](http://ebpf.io)。这将引导你了解最新的新闻、项目、活动，还有[eBPF
    Slack](http://ebpf.io/slack)频道，你很可能会在那里找到专家来回答你可能有的任何问题。
- en: 'I welcome your feedback, comments, and any corrections to this text. You can
    provide your input through the GitHub repository that accompanies this book: [*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf).
    I’d also be happy to hear your comments directly. You can find me as @lizrice
    in many places across the internet.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我欢迎你的反馈、评论以及对本文的任何更正。你可以通过附带本书的GitHub仓库提供你的意见：[*github.com/lizrice/learning-ebpf*](https://github.com/lizrice/learning-ebpf)。我也很乐意直接听取你的意见。你可以在互联网的许多地方找到我，我的用户名是@lizrice。
- en: ^([1](ch11.html#ch11fn1-marker)) Shout-out to Alexei Starovoitov and Andrii
    Nakryiko from Meta, and Daniel Borkmann from Isovalent, who maintain the BPF subtree
    in the Linux kernel.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch11.html#ch11fn1-marker)) 向Meta的Alexei Starovoitov和Andrii Nakryiko，以及Isovalent的Daniel
    Borkmann致敬，他们在Linux内核中维护BPF子树。
- en: ^([2](ch11.html#ch11fn2-marker)) [Dave Thaler presented on the state of this
    standardization work](https://oreil.ly/4bo6Y) at the Linux Plumbers Conference.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch11.html#ch11fn2-marker)) [Dave Thaler在Linux Plumbers Conference上介绍了这项标准化工作的进展](https://oreil.ly/4bo6Y)。
- en: ^([3](ch11.html#ch11fn3-marker)) Well, it *could*, but doing so would require
    Microsoft to also release the Windows source code under the GPL license.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch11.html#ch11fn3-marker)) 嗯，的确可以，但这样做需要微软也以GPL许可证发布Windows源代码。
- en: ^([4](ch11.html#ch11fn4-marker)) Alexei Starovoitov discusses the journey of
    BPF from restricted C language to extended and safe C [in this video](https://oreil.ly/xunKW).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch11.html#ch11fn4-marker)) Alexei Starovoitov讨论了BPF从受限C语言到扩展和安全C的发展过程，[视频链接在此](https://oreil.ly/xunKW)。
