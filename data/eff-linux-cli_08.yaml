- en: Chapter 6\. Parents, Children, and Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。父进程、子进程和环境
- en: The purpose of the shell—to run commands—is so fundamental to Linux that you
    might think the shell is built into Linux in some special way. It is not. A shell
    is just an ordinary program like `ls` or `cat`. It is programmed to repeat the
    following steps over and over and over and over…
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: shell 的目的——运行命令——对于 Linux 来说是如此基本，以至于您可能认为 shell 是以某种特殊方式内置到 Linux 中的。事实并非如此。shell
    就像`ls`或`cat`一样是一个普通程序。它被编程为一遍又一遍地重复以下步骤……
- en: Print a prompt.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印提示符。
- en: Read a command from stdin.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 stdin 中读取命令。
- en: Evaluate and run the command.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估并运行该命令。
- en: Linux does a great job of hiding the fact that a shell is an ordinary program.
    When you log in, Linux automatically runs an instance of the shell for you, known
    as your *login shell*. It launches so seamlessly that it appears to *be* Linux,
    when really it’s just a program launched on your behalf to interact with Linux.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 在很大程度上隐藏了 shell 是一个普通程序的事实。当您登录时，Linux 会自动为您运行一个 shell 实例，称为您的*登录 shell*。它的启动如此无缝，以至于看起来它*是*
    Linux，但实际上它只是一个代表您启动的程序，用于与 Linux 交互。
- en: Where Is Your Login Shell?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的登录 shell 在哪里？
- en: If you log in at a nongraphical terminal, say, using an SSH client program,
    the login shell is the initial shell you interact with. It prints the first prompt
    and awaits your command.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在非图形终端上登录，例如使用 SSH 客户端程序，登录 shell 就是您与之交互的初始 shell。它打印第一个提示符并等待您的命令。
- en: Alternatively, if you’re at the computer’s console with a graphical display,
    your login shell runs behind the scenes. It launches a desktop environment such
    as GNOME, Unity, Cinnamon, or KDE Plasma. Then you can open terminal windows to
    run additional interactive shells.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您在计算机的控制台上有图形显示，您的登录 shell 会在幕后运行。它启动桌面环境，如 GNOME、Unity、Cinnamon 或 KDE
    Plasma。然后您可以打开终端窗口来运行额外的交互式 shell。
- en: 'The more you understand about the shell, the more effectively you can work
    with Linux and the fewer superstitions you’ll develop about its inner workings.
    This chapter explores the following mysteries of shells more deeply than [Chapter 2](ch02.xhtml#ch_shell)
    did:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对 shell 的理解越多，您与 Linux 的有效工作能力就越高，对其内部工作原理的迷信就越少。本章比[第二章](ch02.xhtml#ch_shell)更深入地探讨了以下
    shell 的奥秘：
- en: Where shell programs are located
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: shell 程序的位置
- en: How different shell instances may be related to each other
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的 shell 实例之间如何关联
- en: Why different shell instances may have the same variables, values, aliases,
    and other context
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么不同的 shell 实例可能具有相同的变量、值、别名和其他上下文
- en: How to change a shell’s default behavior by editing configuration files
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过编辑配置文件更改 shell 的默认行为
- en: By the end, I hope you’ll find that these mysteries aren’t so mysterious after
    all.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，希望您会发现，这些神秘并不那么神秘。
- en: Shells Are Executable Files
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell 是可执行文件
- en: 'The default shell on most Linux systems is `bash`,^([1](ch06.xhtml#idm46586640310240))
    and it’s an ordinary program—an executable file—located in the system directory
    */bin* alongside `cat`, `ls`, `grep`, and other familiar commands:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 系统上的默认 shell 是`bash`，^([1](ch06.xhtml#idm46586640310240)) 它只是一个普通程序——一个可执行文件——位于系统目录*/bin*，与`cat`、`ls`、`grep`和其他熟悉的命令一起：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`bash` is also not the only shell on your system, most likely. Valid shells
    are usually listed, one per line, in the file */etc/shells*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`bash` 也不一定是您系统上唯一的 shell。通常在文件*/etc/shells*中列出有效的 shell，每行一个：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To see which shell you’re running, `echo` the shell variable `SHELL`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您正在运行的 shell，请`echo` shell 变量`SHELL`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In theory, a Linux system can treat *any program* as a valid login shell, if
    a user account is configured to invoke it on login and it’s listed in */etc/shells*
    (if required on your system). With superuser privileges, you can even write and
    install your own shell, like the script in [Example 6-1](#ex_halshell). It reads
    any command and responds, “I’m sorry, I’m afraid I can’t do that.” This custom
    shell is intentionally silly, but it demonstrates that other programs can be just
    as legitimate a shell as */bin/bash*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，Linux 系统可以将*任何程序*视为有效的登录 shell，如果用户帐户配置为在登录时调用它，并且它在*/etc/shells*中列出（如果在您的系统上需要）。使用超级用户权限，您甚至可以编写和安装自己的
    shell，就像[示例 6-1](#ex_halshell)中的脚本一样。它读取任何命令并回应：“对不起，我不能做到。”这个自定义 shell 故意愚蠢，但它证明了其他程序可以像*/bin/bash*一样成为合法的
    shell。
- en: 'Example 6-1\. halshell: A shell that refuses to run your commands'
  id: totrans-23
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 6-1。halshell：一个拒绝运行您命令的 shell
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since `bash` is just a program, you can run it manually like any other command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`bash`只是一个程序，您可以像运行其他任何命令一样手动运行它：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you do so, you’ll just see another prompt, as if your command had no effect:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样做，你只会看到另一个提示符，就好像你的命令没有产生任何效果：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But really, you have run a new instance of `bash`. This new instance prints
    a prompt and awaits your command. To make the new instance more visible, change
    its prompt (say, to `%%`) by setting the shell variable `PS1`, and run some commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，你已经运行了一个新的 `bash` 实例。这个新实例会打印一个提示符，并等待你的命令。为了使新实例更加可见，通过设置 shell 变量 `PS1`
    将其提示符（比如改为 `%%`），并运行一些命令：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now run `exit` to terminate the new instance of `bash`. You’ll return to the
    original shell, which has a dollar-sign prompt:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行 `exit` 来终止新的 `bash` 实例。你会回到原始的 shell，它有一个美元符号提示符：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I must emphasize that the change from `%%` back to `$` was not a prompt change.
    It was a whole shell change. The new instance of `bash` has ended, so the original
    shell prompts you for the next command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须强调，从`%%`切换回`$`并不是一个提示符的改变。这是整个 shell 的变化。新的 `bash` 实例已经结束，所以原始 shell 会提示你输入下一个命令。
- en: Running `bash` by hand is not just for entertainment value. You’ll use manually
    invoked shells to your advantage in [Chapter 7](ch07.xhtml#ch_running_commands).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 手动运行 `bash` 不仅仅是为了娱乐价值。你会在[第 7 章](ch07.xhtml#ch_running_commands)中利用手动调用的 shell。
- en: Parent and Child Processes
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 父进程和子进程
- en: When one instance of the shell invokes another, as I just demonstrated, the
    original shell is called the *parent* and the new instance is called the *child*.
    The same is true for any Linux program that invokes any other Linux program. The
    invoking program is the parent, and the invoked program is its child. A running
    Linux program is known as a *process*, so you’ll also see the terms *parent process*
    and *child process*. A process can invoke any number of children, but each child
    has only one parent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 shell 实例调用另一个 shell 实例时，就像我刚才演示的那样，原始 shell 被称为*父进程*，新实例称为*子进程*。对于任何一个 Linux
    程序调用另一个 Linux 程序也是如此。调用的程序是父进程，被调用的程序是它的子进程。运行中的 Linux 程序称为*进程*，因此你也会看到*父进程*和*子进程*这些术语。一个进程可以调用任意数量的子进程，但每个子进程只有一个父进程。
- en: Every process has its own environment. An environment, which you might recall
    from [“Environments and Initialization Files, the Short Version”](ch02.xhtml#section_environments1),
    includes a current directory, search path, shell prompt, and other important information
    held in shell variables. When a child is created, its environment is largely a
    copy of its parent’s environment. (I’ll explain more in [“Environment Variables”](#section_environment_variables).)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进程都有自己的环境。一个环境，你可能还记得来自[“环境和初始化文件简介”](ch02.xhtml#section_environments1)，包括当前目录，搜索路径，shell
    提示符和其他重要信息保存在 shell 变量中。当创建一个子进程时，其环境主要是父进程环境的副本。（我将在[“环境变量”](#section_environment_variables)中进一步解释。）
- en: '*Every time you run a simple command, you create a child process*. This is
    such an important point for understanding Linux that I’ll say it again: even when
    you run a simple command like `ls`, that command secretly runs inside a new child
    process with its own (copied) environment. That means any changes you make to
    a child, like changing the prompt variable `PS1` in a child shell, affect only
    the child and are lost when the child exits. Likewise, any changes to the parent
    won’t affect its children that are already running. Changes to the parent *can*
    affect its *future* children, however, because each child’s environment is copied
    from its parent’s environment on startup.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*每次运行简单命令时，你都创建一个子进程*。这是理解 Linux 的一个非常重要的观点，我会再说一遍：即使你运行像`ls`这样的简单命令，该命令实际上是在一个新的子进程中以其自己（复制的）环境中运行的。这意味着你对子进程所做的任何更改，比如在子
    shell 中更改提示变量 `PS1`，只影响子进程，当子进程退出时这些更改都会丢失。同样地，对父进程的任何更改都不会影响已经运行的子进程。然而，父进程的更改*可以*影响*将来*的子进程，因为每个子进程的环境都是从其父进程的环境中复制过来的。'
- en: 'Why does it matter that commands run in child processes? For one thing, it
    means that any program you run can `cd` all over the filesystem, but when it exits,
    your current shell (the parent) has not changed its current directory. Here’s
    a quick experiment to prove it. Create a shell script called `cdtest` in your
    home directory containing a `cd` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在子进程中运行命令很重要？首先，这意味着你运行的任何程序都可以在整个文件系统中进行`cd`，但退出后，你当前的 shell（即父进程）的当前目录并未改变。下面是一个快速实验来证明这一点。在你的主目录中创建一个名为`cdtest`的
    shell 脚本，其中包含一个`cd`命令：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make it executable:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让它变得可执行：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Print your current directory name and then run the script:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 打印当前目录名称，然后运行脚本：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now check your current directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查你的当前目录：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Your current directory hasn’t changed, even though the `cdtest` script traveled
    to the */etc* directory. That’s because `cdtest` ran inside a child process with
    its own environment. Changes to the child’s environment cannot affect the parent’s
    environment, so the parent’s current directory did not change. The same thing
    happens when you run an executable program like `cat` or `grep`—it runs in a child
    process that exits after the program terminates, taking any environment changes
    with it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您当前的目录并没有改变，即使`cdtest`脚本已经移动到*/etc*目录。这是因为`cdtest`在具有自己环境的子进程中运行。子进程的环境更改不会影响父进程的环境，因此父进程的当前目录没有改变。当您运行像`cat`或`grep`这样的可执行程序时也是一样——它们在运行在子进程中，在程序终止后退出，带走任何环境更改。
- en: Why cd Must Be a Shell Builtin
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为何cd必须是Shell内建功能
- en: If Linux programs cannot change your shell’s current directory, then how does
    the command `cd` manage to change it? Well, `cd` isn’t a program. It’s a built-in
    feature of the shell (a.k.a. a shell builtin). If `cd` were a program external
    to the shell, directory changes would be impossible—they would run in a child
    process and be unable to affect the parent.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Linux程序无法更改您的Shell当前目录，那么`cd`命令如何管理更改呢？嗯，`cd`并不是一个程序。它是Shell的内建特性（即Shell内建）。如果`cd`是Shell外部的程序，目录更改将是不可能的——它们将在子进程中运行，并且无法影响父进程。
- en: 'Pipelines launch multiple child processes: one for each command in the pipeline.
    This command from the section [“Command #6: uniq”](ch01.xhtml#section_uniq) launches
    six children:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 管道会启动多个子进程：每个管道中的命令一个子进程。此命令来自[“命令＃6：uniq”](ch01.xhtml#section_uniq)部分，启动了六个子进程：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Environment Variables
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: 'Every instance of the shell has a collection of variables, as you learned in
    [“Evaluating Variables”](ch02.xhtml#section_variables). Some variables are local
    to a single shell. They are called *local variables*. Other variables are automatically
    copied from a given shell to each child it invokes. These variables are called
    *environment variables*, and they collectively form the shell’s environment. Some
    examples of environment variables and their uses are:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到，每个Shell实例都有一组变量，如您在[“变量评估”](ch02.xhtml#section_variables)中所学。某些变量是局部变量，限于单个Shell。它们称为*本地变量*。其他变量会自动从给定Shell复制到它调用的每个子Shell中。这些变量称为*环境变量*，并且它们共同形成Shell的环境。环境变量及其用途的一些示例包括：
- en: '`HOME`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`HOME`'
- en: The path to your home directory. Its value is set automatically by your login
    shell when you log in. Text editors like `vim` and `emacs` read the variable `HOME`
    so they can locate and read their configuration files (*$HOME/.vim* and *$HOME/.emacs*,
    respectively).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 指向您的主目录的路径。登录时，您的登录Shell会自动设置其值。像`vim`和`emacs`这样的文本编辑器会读取`HOME`变量以定位和读取它们的配置文件（*$HOME/.vim*
    和 *$HOME/.emacs*）。
- en: '`PWD`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`PWD`'
- en: Your shell’s current directory. Its value is set and maintained automatically
    by the shell each time you `cd` to another directory. The command `pwd` reads
    the variable `PWD` to print the name of your shell’s current directory.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Shell当前目录。每次使用`cd`切换到另一个目录时，Shell会自动设置和维护其值。`pwd`命令读取`PWD`变量以打印Shell当前目录的名称。
- en: '`EDITOR`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`EDITOR`'
- en: The name of (or path to) your preferred text editor. Its value is generally
    set by you in a shell configuration file. Other programs read this variable to
    launch an appropriate editor on your behalf.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您首选文本编辑器的名称（或路径）。通常由您在Shell配置文件中设置其值。其他程序会读取此变量以代表您启动适当的编辑器。
- en: View a shell’s environment variables with the `printenv` command. The output
    is one variable per line, unsorted, and can be quite long, so pipe it though `sort`
    and `less` for friendlier viewing:^([2](ch06.xhtml#idm46586640124848))
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`printenv`命令查看Shell的环境变量。输出结果每行一个变量，未排序，可能非常长，因此可以通过`sort`和`less`进行友好查看：^([2](ch06.xhtml#idm46586640124848))
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Local variables do not appear in the output of `printenv`. Display their values
    by preceding the variable name with a dollar sign and printing the result with
    `echo`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量不会出现在`printenv`的输出中。通过在变量名前加上美元符号并使用`echo`打印结果来显示它们的值：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating Environment Variables
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境变量
- en: 'To turn a local variable into an environment variable, use the `export` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将本地变量转换为环境变量，请使用`export`命令：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`export` specifies that the variable and its value will be copied from the
    current shell to any future children. Local variables are not copied to future
    children:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`export`命令指定变量及其值将从当前Shell复制到任何未来的子Shell中。本地变量不会复制到未来的子Shell中：'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Remember, a child’s variables are *copies*. Any changes to the copy do not
    affect the parent shell:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，子进程的变量是*副本*。对副本的任何更改都不会影响父shell：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Launch a new shell anytime and change anything in its environment, and all the
    changes disappear when you exit the shell. This means you can experiment with
    shell features safely—just run a shell manually, creating a child, and terminate
    it when finished.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随时启动一个新的shell并更改其环境中的任何内容，当您退出shell时所有更改都会消失。这意味着您可以安全地尝试shell功能 - 只需手动运行一个shell，创建一个子进程，并在完成时终止它。
- en: 'Superstition Alert: “Global” Variables'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超级警告： “全局” 变量
- en: Sometimes Linux hides its inner workings too well. A great example is the behavior
    of environment variables. Somehow, like magic, variables like `HOME` and `PATH`
    each have a consistent value in all your shell instances. They seem to be “global
    variables” in some sense. (I’ve even seen this claim in other Linux books, not
    published by O’Reilly.) But an environment variable is *not global*. Each shell
    instance has its own copy. Modifying an environment variable in one shell cannot
    change the value in any other running shells. Modifications affect only that shell’s
    future children (not yet invoked).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有时Linux将其内部工作隐藏得太好了。一个很好的例子是环境变量的行为。以某种魔法的方式，像`HOME`和`PATH`这样的变量在所有的shell实例中都有一个一致的值。它们在某种意义上看起来像是“全局变量”（我甚至在O'Reilly之外的其他Linux书籍中见过这种说法）。但环境变量*并不是全局的*。每个shell实例都有自己的副本。在一个shell中修改一个环境变量不会改变其他正在运行的shell中的值。修改只影响该shell未来的子进程（尚未调用的）。
- en: 'If that’s the case, how does a variable like `HOME` or `PATH` seem to keep
    its value in all your shell instances? There are two avenues to make this happen,
    which are illustrated in [Figure 6-1](#fig_exporting). In short:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，像`HOME`或`PATH`这样的变量如何在所有的shell实例中保持其值？有两种方法可以实现这一点，这在[图6-1](#fig_exporting)中有所说明。简而言之：
- en: Children copy from their parents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程从其父进程复制。
- en: For variables like `HOME`, the values are usually set and exported by your login
    shell. All future shells (until you log out) are children of the login shell,
    so they receive a copy of the variable and its value. These sorts of system-defined
    environment variables are so rarely modified in the real world that they seem
    global, but they are just ordinary variables that play by the ordinary rules.
    (You may even change their values in a running shell, but you might disrupt the
    expected behavior of that shell and other programs.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像`HOME`这样的变量，其值通常由您的登录shell设置和导出。所有未来的shell（直到您退出登录）都是登录shell的子进程，因此它们会收到变量及其值的副本。在现实世界中，这些系统定义的环境变量很少被修改，它们看起来像是全局的，但它们只是按照普通规则运行的普通变量。（您甚至可以在运行中的shell中更改它们的值，但这可能会扰乱该shell和其他程序的预期行为。）
- en: Different instances read the same configuration files.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的实例读取相同的配置文件。
- en: Local variables, which are not copied to children, can have their values set
    in a Linux configuration file such as *$HOME/.bashrc* (see more details in [“Configuring
    Your Environment”](#section_bash_configs)). Each instance of the shell, on invocation,
    reads and executes the appropriate configuration files. As a result, these local
    variables appear to be copied from shell to shell. The same is true for other
    nonexported shell features such as aliases.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本地变量，这些变量不会复制到子进程中，可以在Linux配置文件中设置其值，比如*$HOME/.bashrc*（详细信息请参见[“配置您的环境”](#section_bash_configs)）。每次调用时，shell实例都会读取和执行相应的配置文件。因此，这些本地变量看起来会从一个shell复制到另一个shell。对于其他非导出的shell功能，如别名，情况也是如此。
- en: This behavior leads some users to believe that the `export` command creates
    a global variable. It does not. The command `export WHATEVER` simply declares
    that the variable `WHATEVER` will be copied from the current shell to any future
    children.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为使一些用户认为`export`命令创建了一个全局变量。实际上不是这样。命令`export WHATEVER`只是声明变量`WHATEVER`将从当前shell复制到任何未来的子进程中。
- en: '![Shells may share variables and values by export or by reading the same configuration
    files](Images/elcl_0601.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Shell可能通过导出或读取相同的配置文件共享变量和值](Images/elcl_0601.png)'
- en: Figure 6-1\. Shells may share variables and values by export or by reading the
    same configuration files
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6-1\. Shell可能通过导出或读取相同的配置文件共享变量和值
- en: Child Shells Versus Subshells
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子shell与子shell
- en: 'A child is a partial copy of its parent. It includes copies of its parent’s
    environment variables, for example, but not its parent’s local (unexported) variables
    or aliases:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程是其父进程的部分副本。例如，它包括其父进程的环境变量的副本，但不包括其父进程的本地（未导出）变量或别名：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you’ve ever wondered why your aliases aren’t available in shell scripts,
    now you know. Shell scripts run in a child, which does not receive copies of the
    parent’s aliases.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经想知道为什么您的别名在 shell 脚本中不可用，现在您知道了。Shell 脚本在子进程中运行，不会接收到父进程的别名副本。
- en: 'A *subshell*, in contrast, is a complete copy of its parent.^([3](ch06.xhtml#idm46586640055040))
    It includes all the parent’s variables, aliases, functions, and more. To launch
    a command in a subshell, enclose the command in parentheses:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与父 shell 完全相同的*子 shell*，不同的是它包括父 shell 的所有变量、别名、函数等。要在子 shell 中启动命令，请使用括号括起命令：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To check if a shell instance is a subshell, print the variable `BASH_SUBSHELL`.
    The value is nonzero in subshells, zero otherwise:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 shell 实例是否为子 shell，请打印变量`BASH_SUBSHELL`。在子 shell 中，值为非零；否则为零：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'I’ll cover some practical uses of subshells in [“Technique #10: Explicit Subshells”](ch07.xhtml#section_explicit_subshells).
    For now, just be aware that you can create them and they copy the parent’s aliases.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '我将介绍一些子 shell 的实际用途在[“技术 #10：显式子 shell”](ch07.xhtml#section_explicit_subshells)。目前，只需知道您可以创建它们并复制父
    shell 的别名即可。'
- en: Configuring Your Environment
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置您的环境
- en: 'When `bash` runs, it configures itself by reading a sequence of files, called
    *configuration files*, and executing their contents. These files define variables,
    aliases, functions, and other shell features, and they can include any Linux command.
    (They are like shell scripts that configure the shell.) Some configuration files
    are defined by the system administrator and apply to all users system-wide. They
    are found in the directory */etc*. Other configuration files are owned and changed
    by individual users. They are located in the user’s home directory. [Table 6-1](#table_config)
    lists the standard `bash` configuration files. They come in several types:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当`bash`运行时，通过读取一系列文件（称为*配置文件*）并执行它们的内容来配置自己。这些文件定义变量、别名、函数和其他 shell 特性，并且可以包含任何
    Linux 命令。（它们就像配置 shell 的 shell 脚本。）一些配置文件由系统管理员定义，适用于系统中的所有用户。它们位于*/etc*目录中。其他配置文件由个别用户拥有和更改。它们位于用户的主目录中。[表 6-1](#table_config)
    列出了标准`bash`配置文件。它们有几种类型：
- en: Startup files
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 启动文件
- en: Configuration files that execute automatically when you log in—that is, they
    apply only to your login shell. An example command in this file might set and
    export an environment variable. Defining an alias in this file would be less helpful,
    however, because aliases are not copied to children.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在您登录时自动执行的配置文件，即仅适用于您的登录 shell。例如，此文件中的一个命令可能会设置并导出一个环境变量。但是，在此文件中定义别名则不太有用，因为别名不会复制给子进程。
- en: Initialization (“init”) files
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化文件
- en: Configuration files that execute for every shell instance that is not a login
    shell—for example, when you run an interactive shell by hand or a (noninteractive)
    shell script. An example initialization file command might set a variable or define
    an alias.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个非登录 shell 实例执行的配置文件，例如，手动运行互动式 shell 或（非互动式）shell 脚本时。例如，初始化文件中的一个示例命令可能会设置一个变量或定义一个别名。
- en: Cleanup files
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 清理文件
- en: Configuration files that execute immediately before your login shell exits.
    An example command in this file might be `clear` to blank your screen on logout.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的登录 shell 退出之前立即执行的配置文件。此文件中的示例命令可能是`clear`，用于在注销时清空屏幕。
- en: Table 6-1\. Standard configuration files sourced by `bash`
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6-1\. `bash` 所使用的标准配置文件
- en: '| File type | Run by | System-wide location | Personal file locations (in order
    invoked) |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 文件类型 | 被以下运行 | 系统范围的位置 | 个人文件位置（按调用顺序） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Startup files | Login shells, on invocation | */etc/profile* | *$HOME/.bash_profile*,
    *$HOME/.bash_login*, and *$HOME/.profile* |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 启动文件 | 登录 shell，在启动时 | */etc/profile* | *$HOME/.bash_profile*、*$HOME/.bash_login*
    和 *$HOME/.profile* |'
- en: '| Init files | Interactive shells (nonlogin), on invocation | */etc/bash.bashrc*
    | *$HOME/.bashrc* |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 初始化文件 | 互动式 shell（非登录时）启动时 | */etc/bash.bashrc* | *$HOME/.bashrc* |'
- en: '| Shell scripts, on invocation | Set the variable `BASH_ENV` to the absolute
    path to an initialization file (example: `BASH_ENV=/usr/local/etc/bashrc`) | Set
    the variable `BASH_ENV` to the absolute path to an initialization file (example:
    `BASH_ENV=/usr/local/etc/bashrc`) |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| Shell 脚本，在启动时 | 将变量`BASH_ENV`设置为初始化文件的绝对路径（示例：`BASH_ENV=/usr/local/etc/bashrc`）
    | 将变量`BASH_ENV`设置为初始化文件的绝对路径（示例：`BASH_ENV=/usr/local/etc/bashrc`） |'
- en: '| Cleanup files | Login shells, on exit | */etc/bash.bash_logout* | *$HOME/.bash_logout*
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 清理文件 | 登录 shell，在退出时 | */etc/bash.bash_logout* | *$HOME/.bash_logout* |'
- en: Notice that you have three choices for personal startup files in your home directory
    (*.bash_profile*, *.bash_login*, and *.profile*). Most users can just pick one
    and stick with it. Your Linux distro probably supplies one of them already, prefilled
    with (ideally) useful commands. Things are a bit different if you happen to run
    other shells such as Bourne shell (*/bin/sh*) and Korn shell (*/bin/ksh*). These
    shells also read *.profile* and can fail if handed `bash`-specific commands to
    execute. Place `bash`-specific commands in *.bash_profile* or *.bash_login* instead
    (again, just pick one).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你的家目录中有三个个人启动文件选择（*.bash_profile*、*.bash_login* 和 *.profile*）。 大多数用户可以选择其中一个并坚持使用。
    你的 Linux 发行版可能已经提供了其中一个，里面预置了（理想情况下）有用的命令。 如果你运行其他如 Bourne shell（*/bin/sh*）和 Korn
    shell（*/bin/ksh*）的 shell，情况会有所不同。 这些 shell 也会读取 *.profile*，并且如果传递了 `bash` 特定的命令执行可能会失败。
    将 `bash` 特定的命令放在 *.bash_profile* 或 *.bash_login* 中（再次，只需选择一个）。
- en: Users sometimes find the separation of personal startup files and the personal
    initialization file confusing. Why would you want your login shell to behave differently
    from other shells, say, that you open in multiple windows? The answer is, in many
    cases, you don’t need them to behave differently. Your personal startup file might
    do little more than source your personal initialization file, *$HOME/.bashrc*,
    so all interactive shells (login or nonlogin) would have largely the same configuration.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用户有时会发现个人启动文件与个人初始化文件的分离令人困惑。 为什么要让你的登录 shell 与在多个窗口中打开的其他 shell 行为不同呢？ 答案是，在许多情况下，你不需要它们行为不同。
    你的个人启动文件可能只做一点事情，就是源自你的个人初始化文件 *$HOME/.bashrc*，所以所有交互式 shell（登录或非登录）都会有基本相同的配置。
- en: In other cases, you might prefer to split responsibilities between your startup
    and initialization files. For example, your personal startup file might set and
    export your environment variables to be copied to future children, whereas *$HOME/.bashrc*
    might define all your aliases (which are not copied to children).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，你可能更喜欢在你的启动和初始化文件之间分配责任。 例如，你的个人启动文件可能设置和导出你的环境变量以供将来的子进程复制，而 *$HOME/.bashrc*
    可能定义所有你的别名（这些别名不会被复制到子进程）。
- en: Another consideration is whether you log into a graphical, windowing desktop
    environment (GNOME, Unity, KDE Plasma, etc.) where your login shell may be hidden.
    In this case, you might not care how the login shell behaves because you interact
    only with its children, so you might put most or all of your configuration into
    *$HOME/.bashrc*.^([4](ch06.xhtml#idm46586639963168)) On the other hand, if you
    primarily log in from a nongraphical terminal program such as an SSH client, then
    you directly interact with your login shell, so its configuration matters a lot.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个考虑因素是你是否登录到图形窗口桌面环境（GNOME、Unity、KDE Plasma 等），在这种情况下，你的登录 shell 可能会被隐藏。 这种情况下，你可能不关心登录
    shell 的行为，因为你只与其子进程交互，所以你可能会把大部分或全部配置放在 *$HOME/.bashrc* 中。^([4](ch06.xhtml#idm46586639963168))
    另一方面，如果你主要从非图形终端程序如 SSH 客户端登录，那么你直接与登录 shell 交互，因此它的配置非常重要。
- en: 'In each of these cases, it’s generally worthwhile to have your personal startup
    file source your personal initialization file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，让你的个人启动文件源自你的个人初始化文件通常是值得的：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Whatever you do, try not to place identical configuration commands in two different
    configuration files. That’s a recipe for confusion, and it’s hard to maintain,
    because any change you make to one file you must remember to duplicate in the
    other (and you’ll forget, trust me). Instead, source one file from the other as
    I’ve shown.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你做什么，尽量不要在两个不同的配置文件中放置相同的配置命令。 这是一种造成混乱的方法，而且很难维护，因为你在一个文件中做的任何更改都必须记住在另一个文件中复制（而且你会忘记，相信我）。
    反而，像我展示的那样，从一个文件中源另一个文件。
- en: Rereading a Configuration File
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新读取配置文件
- en: 'When you change any startup or initialization file, you can force a running
    shell to reread it by sourcing the file, as explained in [“Environments and Initialization
    Files, the Short Version”](ch02.xhtml#section_environments1):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你更改任何启动或初始化文件时，你可以通过源文件强制运行的 shell 重新读取它，就像在[“环境和初始化文件简短版本”](ch02.xhtml#section_environments1)中解释的那样。
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Why the source Command Exists
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么存在 source 命令
- en: Why do you source a configuration file instead of making it executable with
    `chmod` and running it like a shell script? Because a script runs in a child process.
    Any commands in the script would not affect your intended (parent) shell. They
    would affect only the child, which exits, leaving you with nothing changed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要使用配置文件而不是使用 `chmod` 使其可执行，然后像运行 shell 脚本一样运行它？因为脚本在子进程中运行。脚本中的任何命令都不会影响您预期的（父）shell。它们只会影响子进程，子进程退出后，您将一无所获。
- en: Traveling with Your Environment
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的环境中旅行
- en: If you use many Linux machines in multiple locations, at some point you might
    want to install your carefully crafted configuration files on more than one machine.
    Don’t copy individual files from machine to machine—that approach leads to confusion
    eventually. Instead, store and maintain the files in a free account on [GitHub](https://github.com)
    or a similar software-development service with version control. Then you can download,
    install, and update your configuration files conveniently and consistently on
    any Linux machine. If you make a mistake editing a configuration file, you can
    roll back to a previous version by issuing a command or two. Version control is
    beyond the scope of this book; see [“Apply Version Control to Day-to-Day Files”](ch11.xhtml#section_git)
    to learn more about it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在多个位置使用许多 Linux 机器，某个时候您可能希望在多台机器上安装精心制作的配置文件。不要从一台机器复制单个文件到另一台机器 - 这种方法最终会导致混乱。相反，将文件存储和维护在[GitHub](https://github.com)或类似的软件开发服务中，具有版本控制。然后，您可以在任何
    Linux 机器上方便且一致地下载、安装和更新配置文件。如果在编辑配置文件时出现错误，您可以通过发出一两个命令回滚到先前的版本。版本控制超出了本书的范围；请参阅[“将版本控制应用于日常文件”](ch11.xhtml#section_git)以了解更多信息。
- en: If you aren’t comfortable with version control systems like Git or Subversion,
    store the configuration files on a simple file service like Dropbox, Google Drive,
    or OneDrive. Updates to your configuration files will be less convenient, but
    at least the files will be easily available for copying to other Linux systems.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 Git 或 Subversion 等版本控制系统，请将配置文件存储在像 Dropbox、Google Drive 或 OneDrive 这样的简单文件服务上。更新配置文件将不太方便，但至少文件将很容易可用于复制到其他
    Linux 系统。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I have met many Linux users who are puzzled by (or unaware of) parent and child
    processes, environments, and the purposes of the many shell configuration files.
    After reading this chapter, I hope you have a clearer picture of all these things.
    They come into play in [Chapter 7](ch07.xhtml#ch_running_commands) as powerful
    tools for running commands in flexible ways.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到了许多对 Linux 用户感到困惑（或不知情）的人，他们不理解父进程和子进程、环境以及许多 shell 配置文件的目的。阅读本章后，我希望您对所有这些事情有了更清晰的认识。它们在[第
    7 章](ch07.xhtml#ch_running_commands)中作为运行命令的强大工具发挥作用。
- en: ^([1](ch06.xhtml#idm46586640310240-marker)) If you use a different shell, see
    also [Appendix B](app02.xhtml#appendix_shells).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.xhtml#idm46586640310240-marker)) 如果您使用不同的 shell，请参阅[附录 B](app02.xhtml#appendix_shells)。
- en: ^([2](ch06.xhtml#idm46586640124848-marker)) I have trimmed the output selectively
    to display common environment variables. Your output is likely much longer and
    full of obscure variable names.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.xhtml#idm46586640124848-marker)) 我选择性地削减输出以显示常见的环境变量。您的输出可能更长，充满了晦涩的变量名。
- en: ^([3](ch06.xhtml#idm46586640055040-marker)) It’s complete except for traps,
    which “are reset to the values that the shell inherited from its parent at invocation”
    (`man bash`). I don’t discuss traps further in this book.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch06.xhtml#idm46586640055040-marker)) 它完整，除了陷阱，“在启动时从其父进程继承的值” (`man bash`)。我在本书中不再进一步讨论陷阱。
- en: ^([4](ch06.xhtml#idm46586639963168-marker)) To make matters slightly more confusing,
    some desktop environments have their own shell configuration files. For example,
    GNOME has *$HOME/.gnomerc*, and the underlying X window system has *$HOME/.xinitrc*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch06.xhtml#idm46586639963168-marker)) 为了让事情稍微更加混乱，一些桌面环境有它们自己的 shell 配置文件。例如，GNOME
    有 *$HOME/.gnomerc*，底层的 X 窗口系统有 *$HOME/.xinitrc*。
